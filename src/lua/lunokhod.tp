; bootstrap
(!line "@lua/lunokhod.lua" 1)
(!line 8)(!define _G _G)
(!line 9)(!define assert assert)
(!line 10)(!define char (!index string "char"))
(!line 11)(!define error error)
(!line 12)(!define _find (!index string "find"))
(!line 13)(!define format (!index string "format"))
(!line 14)(!define quote (!index tvm "quote"))
(!line 15)(!define setmetatable setmetatable)
(!line 16)(!define sub (!index string "sub"))
(!line 17)(!define tconcat (!index table "concat"))
(!line 18)(!define tonumber tonumber)
(!line 20)(!define find)(!assign find (!lambda (s patt)
(!line 21)(!return (!call _find s patt 1 !true))))

(!line 24)(!define digit "0123456789")
(!line 25)(!define xdigit (!concat "ABCDEF" (!concat "abcdef" digit)))
(!line 27)(!define alpha (!concat "ABCDEFGHIJKLMNOPQRSTUVWXYZ" (!concat "abcdefghijklmnopqrstuvwxyz" "_")))
(!line 29)(!define alnum (!concat alpha digit))
(!line 30)(!define newline "\x0A\x0D")
(!line 31)(!define space " \x0C\x09\x0B\x0A\x0D")
(!line 33)(!define tokens ("and": !true "break": !true "do": !true "else": !true "elseif": !true "end": !true "false": !true "for": !true "function": !true "goto": !true "if": !true "in": !true "local": !true "nil": !true "not": !true "or": !true "repeat": !true "return": !true "then": !true "true": !true "until": !true "while": !true ))
(!line 58)(!define L ())
(!line 60)(!assign (!index L "_resetbuffer") (!lambda (self)
(!line 61)(!assign (!index self "buff") ())))

(!line 64)(!assign (!index L "_buffremove") (!lambda (self n)
(!line 65)(!loop _ 1 n 1
(!define _ _)
(!line 66)(!assign (!index (!index self "buff") (!len (!index self "buff"))) !nil))))

(!line 70)(!assign (!index L "_next") (!lambda (self)
(!line 71)(!assign (!index self "pos") (!add (!index self "pos") 1))
(!line 72)(!define c (!call sub (!index self "z") (!index self "pos") (!index self "pos")))
(!line 73)(!assign (!index self "current") (!or (!and (!ne c "") c) "<eof>"))
(!line 74)(!return (!index self "current"))))

(!line 77)(!assign (!index L "_save_and_next") (!lambda (self)
(!line 78)(!callmeth self _save (!index self "current"))
(!line 79)(!callmeth self _next )))

(!line 82)(!assign (!index L "_save") (!lambda (self c)
(!line 83)(!assign (!index (!index self "buff") (!add (!len (!index self "buff")) 1)) c)))

(!line 86)(!assign (!index L "_txtToken") (!lambda (self token)
(!line 87)(!if (!or (!or (!eq token "<name>") (!eq token "<string>")) (!eq token "<number>"))
(!do
(!line 90)(!return (!call tconcat (!index self "buff"))))(!do
(!line 92)(!return token)))))

(!line 96)(!define chunkid)(!assign chunkid (!lambda (source max)
(!line 97)(!define first (!call sub source 1 1))
(!line 98)(!if (!eq first "=")
(!do
(!line 99)(!return (!call sub source 2 (!add 1 max))))(!if (!eq first "@")
(!do
(!line 101)(!if (!le (!len source) max)
(!do
(!line 102)(!return (!call sub source 2)))(!do
(!line 104)(!return (!concat "..." (!call sub source (!neg max)))))))(!do
(!line 107)(!assign source (!call sub source 1 (!sub (!or (!call1 find source "\x0A") (!len source)) 1)))
(!line 108)(!assign source (!or (!and (!lt (!len source) (!sub max 11)) source) (!concat (!call sub source 1 (!sub max 14)) "...")))
(!line 109)(!return (!concat "[string \"" (!concat source "\"]"))))))))

(!line 113)(!assign (!index L "_lexerror") (!lambda (self msg token)
(!line 114)(!assign msg (!call format "%s:%d: %s" (!call chunkid (!index self "source") 60) (!index self "linenumber") msg))
(!line 115)(!if token
(!do
(!line 116)(!assign msg (!call format "%s near %s" msg (!callmeth self _txtToken token)))))
(!line 118)(!call error msg)))

(!line 121)(!assign (!index L "syntaxerror") (!lambda (self msg)
(!line 122)(!callmeth self _lexerror msg (!index (!index self "t") "token"))))

(!line 125)(!assign (!index L "_inclinenumber") (!lambda (self)
(!line 126)(!define old (!index self "current"))
(!line 127)(!call assert (!call find newline (!index self "current")))
(!line 128)(!callmeth self _next )
(!line 129)(!if (!and (!call1 find newline (!index self "current")) (!ne (!index self "current") old))
(!do
(!line 130)(!callmeth self _next )))
(!line 132)(!assign (!index self "linenumber") (!add (!index self "linenumber") 1))))

(!line 135)(!assign (!index L "setinput") (!lambda (self z source)
(!line 136)(!assign (!index self "_lookahead") ("token": !false "seminfo": !false))
(!line 137)(!assign (!index self "z") z)
(!line 138)(!assign (!index self "linenumber") 1)
(!line 139)(!assign (!index self "lastline") 1)
(!line 140)(!assign (!index self "source") source)
(!line 141)(!assign (!index self "buff") ())
(!line 142)(!assign (!index self "pos") 0)
(!line 143)(!assign (!index self "t") ("token": (!callmeth1 self _next ) "seminfo": !false))))

(!line 152)(!assign (!index L "_check_next1") (!lambda (self c)
(!line 153)(!if (!eq (!index self "current") c)
(!do
(!line 154)(!callmeth self _next )
(!line 155)(!return !true)))))

(!line 159)(!assign (!index L "_check_next2") (!lambda (self set)
(!line 160)(!if (!call1 find set (!index self "current"))
(!do
(!line 161)(!callmeth self _save_and_next )
(!line 162)(!return !true)))))

(!line 166)(!assign (!index L "_read_numeral") (!lambda (self tok)
(!line 167)(!define expo "Ee")
(!line 168)(!define first (!index self "current"))
(!line 169)(!call assert (!call find digit (!index self "current")))
(!line 170)(!callmeth self _save_and_next )
(!line 171)(!if (!and (!eq first "0") (!callmeth self _check_next2 "Xx"))
(!do
(!line 172)(!assign expo "Pp")))
(!line 174)(!while !true

(!line 175)(!if (!callmeth1 self _check_next2 expo)
(!do
(!line 176)(!callmeth self _check_next2 "+-"))(!if (!or (!call1 find xdigit (!index self "current")) (!eq (!index self "current") "."))
(!do
(!line 178)(!callmeth self _save_and_next ))(!do
(!line 180)(!break)))))
(!line 183)(!assign (!index tok "seminfo") (!call tconcat (!index self "buff")))
(!line 184)(!if (!not (!call tonumber (!index tok "seminfo")))
(!do
(!line 185)(!callmeth self _lexerror "malformed number" "<number>")))
(!line 187)(!return "<number>")))

(!line 190)(!assign (!index L "_skip_sep") (!lambda (self)
(!line 191)(!define count 0)
(!line 192)(!define s (!index self "current"))
(!line 193)(!call assert (!or (!eq s "[") (!eq s "]")))
(!line 194)(!callmeth self _save_and_next )
(!line 195)(!while (!eq (!index self "current") "=")

(!line 196)(!callmeth self _save_and_next )
(!line 197)(!assign count (!add count 1)))
(!line 199)(!return (!or (!and (!eq (!index self "current") s) count) (!sub (!neg count) 1)))))

(!line 202)(!assign (!index L "_read_long_string") (!lambda (self tok sep)
(!line 203)(!define line (!index self "linenumber"))
(!line 204)(!callmeth self _save_and_next )
(!line 205)(!if (!call1 find newline (!index self "current"))
(!do
(!line 206)(!callmeth self _inclinenumber )))
(!line 208)(!while !true

(!line 209)(!if (!eq (!index self "current") "<eof>")
(!do
(!line 210)(!define what (!or (!and tok "string") "comment"))
(!line 211)(!define msg (!call format "unfinished long %s (starting at line %d)" what line))
(!line 212)(!callmeth self _lexerror msg "<eof>"))(!if (!eq (!index self "current") "]")
(!do
(!line 214)(!if (!eq (!callmeth1 self _skip_sep ) sep)
(!do
(!line 215)(!callmeth self _save_and_next )
(!line 216)(!break))))(!if (!or (!eq (!index self "current") "\x0A") (!eq (!index self "current") "\x0D"))
(!do
(!line 219)(!callmeth self _save "\x0A")
(!line 220)(!callmeth self _inclinenumber )
(!line 221)(!if (!not tok)
(!do
(!line 222)(!callmeth self _resetbuffer ))))(!do
(!line 225)(!if tok
(!do
(!line 226)(!callmeth self _save_and_next ))(!do
(!line 228)(!callmeth self _next ))))))))
(!line 232)(!if tok
(!do
(!line 233)(!assign (!index tok "seminfo") (!call sub (!call tconcat (!index self "buff")) (!add 3 sep) (!sub (!neg 3) sep)))
(!line 234)(!return "<string>")))))

(!line 238)(!assign (!index L "_esccheck") (!lambda (self cond msg)
(!line 239)(!if (!not cond)
(!do
(!line 240)(!if (!ne (!index self "current") "<eof>")
(!do
(!line 241)(!callmeth self _save_and_next )))
(!line 243)(!callmeth self _lexerror msg "<string>")))))

(!line 247)(!assign (!index L "_gethexa") (!lambda (self)
(!line 248)(!callmeth self _save_and_next )
(!line 249)(!define c (!index self "current"))
(!line 250)(!callmeth self _esccheck (!call find xdigit c) "hexadecimal digit expected")
(!line 251)(!return (!call tonumber c 16))))

(!line 254)(!assign (!index L "_readhexaesc") (!lambda (self)
(!line 255)(!define r (!callmeth self _gethexa ))
(!line 256)(!assign r (!add (!mul 16 r) (!callmeth self _gethexa )))
(!line 257)(!callmeth self _buffremove 2)
(!line 258)(!return (!call char r))))

(!line 261)(!assign (!index L "_readdecesc") (!lambda (self)
(!line 262)(!define r 0)
(!line 263)(!define i 0)
(!line 264)(!while (!and (!lt i 3) (!call find digit (!index self "current")))

(!line 265)(!assign r (!add (!mul 10 r) (!call tonumber (!index self "current"))))
(!line 266)(!callmeth self _save_and_next )
(!line 267)(!assign i (!add i 1)))
(!line 269)(!callmeth self _esccheck (!le r 255) "decimal escape too large")
(!line 270)(!callmeth self _buffremove i)
(!line 271)(!return (!call char r))))

(!line 274)(!assign (!index L "_read_string") (!lambda (self del tok)
(!line 275)(!callmeth self _save_and_next )
(!line 276)(!while (!ne (!index self "current") del)

(!line 277)(!if (!eq (!index self "current") "<eof>")
(!do
(!line 278)(!callmeth self _lexerror "unfinished string" "<eof>"))(!if (!or (!eq (!index self "current") "\x0A") (!eq (!index self "current") "\x0D"))
(!do
(!line 281)(!callmeth self _lexerror "unfinished string" "<string>"))(!if (!eq (!index self "current") "\\")
(!do
(!line 283)(!define c)
(!line 284)(!callmeth self _save_and_next )
(!line 285)(!if (!eq (!index self "current") "a")
(!do
(!line 286)(!assign c "\x07")
(!line 287)(!goto read_save))(!if (!eq (!index self "current") "b")
(!do
(!line 289)(!assign c "b")
(!line 290)(!goto read_save))(!if (!eq (!index self "current") "f")
(!do
(!line 292)(!assign c "\x0C")
(!line 293)(!goto read_save))(!if (!eq (!index self "current") "n")
(!do
(!line 295)(!assign c "\x0A")
(!line 296)(!goto read_save))(!if (!eq (!index self "current") "r")
(!do
(!line 298)(!assign c "\x0D")
(!line 299)(!goto read_save))(!if (!eq (!index self "current") "t")
(!do
(!line 301)(!assign c "\x09")
(!line 302)(!goto read_save))(!if (!eq (!index self "current") "v")
(!do
(!line 304)(!assign c "\x0B")
(!line 305)(!goto read_save))(!if (!eq (!index self "current") "x")
(!do
(!line 307)(!assign c (!callmeth self _readhexaesc ))
(!line 308)(!goto read_save))(!if (!or (!eq (!index self "current") "\x0A") (!eq (!index self "current") "\x0D"))
(!do
(!line 311)(!callmeth self _inclinenumber )
(!line 312)(!assign c "\x0A")
(!line 313)(!goto only_save))(!if (!eq (!index self "current") "\\")
(!do
(!line 315)(!assign c "\\")
(!line 316)(!goto read_save))(!if (!eq (!index self "current") "\"")
(!do
(!line 318)(!assign c "\"")
(!line 319)(!goto read_save))(!if (!eq (!index self "current") "'")
(!do
(!line 321)(!assign c "'")
(!line 322)(!goto read_save))(!if (!eq (!index self "current") "<eof>")
(!do
(!line 324)(!goto no_save))(!if (!eq (!index self "current") "z")
(!do
(!line 327)(!callmeth self _buffremove 1)
(!line 328)(!callmeth self _next )
(!line 329)(!while (!call1 find space (!index self "current"))

(!line 330)(!if (!call1 find newline (!index self "current"))
(!do
(!line 331)(!callmeth self _inclinenumber ))(!do
(!line 333)(!callmeth self _next ))))
(!line 336)(!goto no_save))(!do
(!line 338)(!callmeth self _esccheck (!call find digit (!index self "current")) "invalid escape sequence")
(!line 339)(!assign c (!callmeth self _readdecesc ))
(!line 340)(!goto only_save))))))))))))))))
(!line 342)(!label read_save)
(!line 343)(!callmeth self _next )
(!line 344)(!label only_save)
(!line 345)(!callmeth self _buffremove 1)
(!line 346)(!callmeth self _save c)
(!line 347)(!label no_save))(!do
(!line 349)(!callmeth self _save_and_next ))))))
(!line 352)(!callmeth self _save_and_next )
(!line 353)(!assign (!index tok "seminfo") (!call sub (!call tconcat (!index self "buff")) 2 (!neg 2)))
(!line 354)(!return "<string>")))

(!line 357)(!assign (!index L "_llex") (!lambda (self tok)
(!line 358)(!callmeth self _resetbuffer )
(!line 359)(!while !true

(!line 360)(!if (!or (!eq (!index self "current") "\x0A") (!eq (!index self "current") "\x0D"))
(!do
(!line 362)(!callmeth self _inclinenumber ))(!if (!or (!or (!or (!eq (!index self "current") " ") (!eq (!index self "current") "\x0C")) (!eq (!index self "current") "\x09")) (!eq (!index self "current") "\x0B"))
(!do
(!line 367)(!callmeth self _next ))(!if (!eq (!index self "current") "-")
(!do
(!line 369)(!callmeth self _next )
(!line 370)(!if (!ne (!index self "current") "-")
(!do
(!line 371)(!return "-")))
(!line 373)(!callmeth self _next )
(!line 374)(!if (!eq (!index self "current") "[")
(!do
(!line 375)(!define sep (!callmeth self _skip_sep ))
(!line 376)(!callmeth self _resetbuffer )
(!line 377)(!if (!ge sep 0)
(!do
(!line 378)(!callmeth self _read_long_string !nil sep)
(!line 379)(!callmeth self _resetbuffer ))))(!do
(!line 382)(!while (!and (!not (!call find newline (!index self "current"))) (!ne (!index self "current") "<eof>"))

(!line 383)(!callmeth self _next )))))(!if (!eq (!index self "current") "[")
(!do
(!line 387)(!define sep (!callmeth self _skip_sep ))
(!line 388)(!if (!ge sep 0)
(!do
(!line 389)(!return (!callmeth self _read_long_string tok sep)))(!if (!ne sep (!neg 1))
(!do
(!line 391)(!callmeth self _lexerror "invalid long string delimiter" "<string>"))))
(!line 393)(!return "["))(!if (!eq (!index self "current") "=")
(!do
(!line 395)(!callmeth self _next )
(!line 396)(!if (!callmeth1 self _check_next1 "=")
(!do
(!line 397)(!return "=="))(!do
(!line 399)(!return "="))))(!if (!eq (!index self "current") "<")
(!do
(!line 402)(!callmeth self _next )
(!line 403)(!if (!callmeth1 self _check_next1 "=")
(!do
(!line 404)(!return "<="))(!if (!callmeth1 self _check_next1 "<")
(!do
(!line 406)(!return "<<"))(!do
(!line 408)(!return "<")))))(!if (!eq (!index self "current") ">")
(!do
(!line 411)(!callmeth self _next )
(!line 412)(!if (!callmeth1 self _check_next1 "=")
(!do
(!line 413)(!return ">="))(!if (!callmeth1 self _check_next1 ">")
(!do
(!line 415)(!return ">>"))(!do
(!line 417)(!return ">")))))(!if (!eq (!index self "current") "~")
(!do
(!line 420)(!callmeth self _next )
(!line 421)(!if (!callmeth1 self _check_next1 "=")
(!do
(!line 422)(!return "~="))(!do
(!line 424)(!return "~"))))(!if (!eq (!index self "current") ":")
(!do
(!line 427)(!callmeth self _next )
(!line 428)(!if (!callmeth1 self _check_next1 ":")
(!do
(!line 429)(!return "::"))(!do
(!line 431)(!return ":"))))(!if (!or (!eq (!index self "current") "\"") (!eq (!index self "current") "'"))
(!do
(!line 435)(!return (!callmeth self _read_string (!index self "current") tok)))(!if (!eq (!index self "current") ".")
(!do
(!line 437)(!callmeth self _save_and_next )
(!line 438)(!if (!callmeth1 self _check_next1 ".")
(!do
(!line 439)(!if (!callmeth1 self _check_next1 ".")
(!do
(!line 440)(!return "..."))(!do
(!line 442)(!return "..")))))
(!line 445)(!if (!not (!call find digit (!index self "current")))
(!do
(!line 446)(!return "."))(!do
(!line 448)(!return (!callmeth self _read_numeral tok)))))(!if (!call1 find digit (!index self "current"))
(!do
(!line 451)(!return (!callmeth self _read_numeral tok)))(!if (!eq (!index self "current") "<eof>")
(!do
(!line 453)(!return "<eof>"))(!do
(!line 455)(!if (!call1 find alpha (!index self "current"))
(!do
(!line 456)(!repeat
(!line 457)(!callmeth self _save_and_next )
(!not (!call find alnum (!index self "current"))))
(!line 459)(!assign (!index tok "seminfo") (!call tconcat (!index self "buff")))
(!line 460)(!if (!index tokens (!index tok "seminfo"))
(!do
(!line 461)(!return (!index tok "seminfo")))(!do
(!line 463)(!return "<name>"))))(!do
(!line 466)(!define c (!index self "current"))
(!line 467)(!callmeth self _next )
(!line 468)(!return c))))))))))))))))))))

(!line 474)(!assign (!index L "next") (!lambda (self)
(!line 475)(!assign (!index self "lastline") (!index self "linenumber"))
(!line 476)(!if (!index (!index self "_lookahead") "token")
(!do
(!line 477)(!assign (!index (!index self "t") "token") (!index (!index self "_lookahead") "token"))
(!line 478)(!assign (!index (!index self "t") "seminfo") (!index (!index self "_lookahead") "seminfo"))
(!line 479)(!assign (!index (!index self "_lookahead") "token") !false))(!do
(!line 481)(!assign (!index (!index self "t") "token") (!callmeth self _llex (!index self "t")))))))

(!line 485)(!assign (!index L "lookahead") (!lambda (self)
(!line 486)(!call assert (!not (!index (!index self "_lookahead") "token")))
(!line 487)(!assign (!index (!index self "_lookahead") "token") (!callmeth self _llex (!index self "_lookahead")))
(!line 488)(!return (!index (!index self "_lookahead") "token"))))

(!line 491)(!assign (!index L "BOM") (!lambda (self)
(!line 493)(!if (!eq (!index self "current") (!call char 0xEF))
(!do
(!line 494)(!callmeth self _next )
(!line 495)(!if (!eq (!index self "current") (!call char 0xBB))
(!do
(!line 496)(!callmeth self _next )
(!line 497)(!if (!eq (!index self "current") (!call char 0xBF))
(!do
(!line 498)(!callmeth self _next )))))))))

(!line 504)(!assign (!index L "shebang") (!lambda (self)
(!line 505)(!callmeth self BOM )
(!line 506)(!if (!eq (!index self "current") "#")
(!do
(!line 507)(!while (!ne (!index self "current") "\x0A")

(!line 508)(!callmeth self _next ))
(!line 510)(!callmeth self _inclinenumber )))))

(!line 514)(!define P (!call setmetatable () ("__index": L)))
(!line 516)(!assign (!index P "error_expected") (!lambda (self token)
(!line 517)(!callmeth self syntaxerror (!concat token " expected"))))

(!line 520)(!assign (!index P "testnext") (!lambda (self c)
(!line 521)(!if (!eq (!index (!index self "t") "token") c)
(!do
(!line 522)(!callmeth self next )
(!line 523)(!return !true))(!do
(!line 525)(!return !false)))))

(!line 529)(!assign (!index P "check") (!lambda (self c)
(!line 530)(!if (!ne (!index (!index self "t") "token") c)
(!do
(!line 531)(!callmeth self error_expected c)))))

(!line 535)(!assign (!index P "checknext") (!lambda (self c)
(!line 536)(!callmeth self check c)
(!line 537)(!callmeth self next )))

(!line 540)(!assign (!index P "check_match") (!lambda (self what who where)
(!line 541)(!if (!not (!callmeth self testnext what))
(!do
(!line 542)(!if (!eq where (!index self "linenumber"))
(!do
(!line 543)(!callmeth self error_expected what))(!do
(!line 545)(!callmeth self syntaxerror (!call format "%s expected (to close %s at line %d)" what who where))))))))

(!line 550)(!assign (!index P "str_checkname") (!lambda (self)
(!line 551)(!callmeth self check "<name>")
(!line 552)(!define name (!index (!index self "t") "seminfo"))
(!line 553)(!callmeth self next )
(!line 554)(!return name)))

(!line 563)(!assign (!index P "block_follow") (!lambda (self withuntil)
(!line 564)(!if (!or (!or (!or (!eq (!index (!index self "t") "token") "else") (!eq (!index (!index self "t") "token") "elseif")) (!eq (!index (!index self "t") "token") "end")) (!eq (!index (!index self "t") "token") "<eof>"))
(!do
(!line 568)(!return !true))(!if (!eq (!index (!index self "t") "token") "until")
(!do
(!line 570)(!return withuntil))(!do
(!line 572)(!return !false))))))

(!line 576)(!assign (!index P "statlist") (!lambda (self)
(!line 578)(!while (!not (!callmeth self block_follow !true))

(!line 579)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) "\x0A")
(!line 580)(!if (!eq (!index (!index self "t") "token") "return")
(!do
(!line 581)(!callmeth self statement )
(!line 582)(!return )))
(!line 584)(!callmeth self statement ))))

(!line 588)(!assign (!index P "fieldsel") (!lambda (self)
(!line 590)(!callmeth self next )
(!line 591)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) (!call quote (!callmeth self str_checkname )))))

(!line 594)(!assign (!index P "yindex") (!lambda (self)
(!line 596)(!callmeth self next )
(!line 597)(!callmeth self expr !true)
(!line 598)(!callmeth self checknext "]")))

(!line 601)(!assign (!index P "recfield") (!lambda (self)
(!line 603)(!if (!eq (!index (!index self "t") "token") "<name>")
(!do
(!line 604)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) (!call quote (!callmeth self str_checkname ))))(!do
(!line 606)(!callmeth self yindex )))
(!line 608)(!callmeth self checknext "=")
(!line 609)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ": ")
(!line 610)(!callmeth self expr !true)))

(!line 613)(!assign (!index P "listfield") (!lambda (self list)
(!line 615)(!if (!eq (!len list) 0)
(!do
(!line 616)(!assign (!index list 1) !true)))
(!line 618)(!callmeth self expr )))

(!line 621)(!assign (!index P "field") (!lambda (self list)
(!line 623)(!if (!eq (!index (!index self "t") "token") "<name>")
(!do
(!line 624)(!if (!ne (!callmeth1 self lookahead ) "=")
(!do
(!line 625)(!callmeth self listfield list))(!do
(!line 627)(!callmeth self recfield ))))(!if (!eq (!index (!index self "t") "token") "[")
(!do
(!line 630)(!callmeth self recfield ))(!do
(!line 632)(!callmeth self listfield list))))))

(!line 636)(!assign (!index P "constructor") (!lambda (self)
(!line 638)(!define line (!index self "linenumber"))
(!line 639)(!callmeth self checknext "{")
(!line 640)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) "(")
(!line 641)(!define list ())
(!line 642)(!repeat
(!line 643)(!if (!eq (!index (!index self "t") "token") "}")
(!do
(!line 644)(!break)))
(!line 646)(!callmeth self field list)
(!line 647)(!if (!or (!eq (!index (!index self "t") "token") ",") (!eq (!index (!index self "t") "token") ";"))
(!do
(!line 648)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) " ")))
(!not (!or (!callmeth1 self testnext ",") (!callmeth self testnext ";"))))
(!line 651)(!callmeth self check_match "}" "{" line)
(!line 652)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ")")))

(!line 655)(!assign (!index P "parlist") (!lambda (self ismethod)
(!line 658)(!if ismethod
(!do
(!line 659)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) "self")))
(!line 661)(!if (!ne (!index (!index self "t") "token") ")")
(!do
(!line 662)(!if ismethod
(!do
(!line 663)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) " ")))
(!line 665)(!repeat
(!line 666)(!if (!eq (!index (!index self "t") "token") "<name>")
(!do
(!line 667)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) (!index (!index self "t") "seminfo"))
(!line 668)(!callmeth self next ))(!if (!eq (!index (!index self "t") "token") "...")
(!do
(!line 670)(!callmeth self next )
(!line 671)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) "!vararg")
(!line 672)(!break))(!do
(!line 674)(!callmeth self syntaxerror "<name> or '...' expected"))))
(!line 676)(!if (!eq (!index (!index self "t") "token") ",")
(!do
(!line 677)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) " ")))
(!not (!callmeth self testnext ",")))))))

(!line 683)(!assign (!index P "body") (!lambda (self ismethod line)
(!line 685)(!define line (!index self "linenumber"))
(!line 686)(!callmeth self checknext "(")
(!line 687)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) "(")
(!line 688)(!callmeth self parlist ismethod)
(!line 689)(!callmeth self checknext ")")
(!line 690)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ")")
(!line 691)(!callmeth self statlist )
(!line 692)(!callmeth self check_match "end" "function" line)
(!line 693)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ")")))

(!line 696)(!assign (!index P "explist") (!lambda (self)
(!line 698)(!callmeth self expr )
(!line 699)(!while (!callmeth1 self testnext ",")

(!line 700)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) " ")
(!line 701)(!callmeth self expr ))))

(!line 705)(!assign (!index P "funcargs") (!lambda (self line)
(!line 706)(!if (!eq (!index (!index self "t") "token") "(")
(!do
(!line 708)(!callmeth self next )
(!line 709)(!if (!ne (!index (!index self "t") "token") ")")
(!do
(!line 710)(!callmeth self explist )))
(!line 712)(!callmeth self check_match ")" "(" line))(!if (!eq (!index (!index self "t") "token") "{")
(!do
(!line 715)(!callmeth self constructor ))(!if (!eq (!index (!index self "t") "token") "<string>")
(!do
(!line 718)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) (!call quote (!index (!index self "t") "seminfo")))
(!line 719)(!callmeth self next ))(!do
(!line 721)(!callmeth self syntaxerror "function arguments expected")))))))

(!line 725)(!assign (!index P "primaryexpr") (!lambda (self)
(!line 727)(!if (!eq (!index (!index self "t") "token") "(")
(!do
(!line 728)(!define line (!index self "linenumber"))
(!line 729)(!callmeth self next )
(!line 730)(!callmeth self expr !true)
(!line 731)(!callmeth self check_match ")" "(" line))(!if (!eq (!index (!index self "t") "token") "<name>")
(!do
(!line 733)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) (!callmeth self str_checkname )))(!do
(!line 735)(!callmeth self syntaxerror "unexpected symbol"))))))

(!line 739)(!assign (!index P "suffixedexp") (!lambda (self one)
(!line 742)(!define line (!index self "linenumber"))
(!line 743)(!define sav (!index self "out"))
(!line 744)(!assign (!index self "out") ())
(!line 745)(!callmeth self primaryexpr )
(!line 746)(!define out (!call tconcat (!index self "out")))
(!line 747)(!while !true

(!line 748)(!assign (!index self "out") ())
(!line 749)(!if (!eq (!index (!index self "t") "token") ".")
(!do
(!line 750)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) "(!index ")
(!line 751)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) out)
(!line 752)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) " ")
(!line 753)(!callmeth self fieldsel )
(!line 754)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ")")
(!line 755)(!assign out (!call tconcat (!index self "out"))))(!if (!eq (!index (!index self "t") "token") "[")
(!do
(!line 757)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) "(!index ")
(!line 758)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) out)
(!line 759)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) " ")
(!line 760)(!callmeth self yindex )
(!line 761)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ")")
(!line 762)(!assign out (!call tconcat (!index self "out"))))(!if (!eq (!index (!index self "t") "token") ":")
(!do
(!line 764)(!callmeth self next )
(!line 765)(!if one
(!do
(!line 766)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) "(!callmeth1 "))(!do
(!line 768)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) "(!callmeth ")))
(!line 770)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) out)
(!line 771)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) " ")
(!line 772)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) (!callmeth self str_checkname ))
(!line 773)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) " ")
(!line 774)(!callmeth self funcargs line)
(!line 775)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ")")
(!line 776)(!assign out (!call tconcat (!index self "out"))))(!if (!or (!or (!eq (!index (!index self "t") "token") "(") (!eq (!index (!index self "t") "token") "{")) (!eq (!index (!index self "t") "token") "<string>"))
(!do
(!line 780)(!if one
(!do
(!line 781)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) "(!call1 "))(!do
(!line 783)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) "(!call ")))
(!line 785)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) out)
(!line 786)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) " ")
(!line 787)(!callmeth self funcargs line)
(!line 788)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ")")
(!line 789)(!assign out (!call tconcat (!index self "out"))))(!do
(!line 791)(!assign (!index self "out") sav)
(!line 792)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) out)
(!line 793)(!return )))))))))

(!line 798)(!assign (!index P "simpleexpr") (!lambda (self one)
(!line 801)(!if (!eq (!index (!index self "t") "token") "<number>")
(!do
(!line 802)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) (!index (!index self "t") "seminfo")))(!if (!eq (!index (!index self "t") "token") "<string>")
(!do
(!line 804)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) (!call quote (!index (!index self "t") "seminfo"))))(!if (!eq (!index (!index self "t") "token") "nil")
(!do
(!line 806)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) "!nil"))(!if (!eq (!index (!index self "t") "token") "true")
(!do
(!line 808)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) "!true"))(!if (!eq (!index (!index self "t") "token") "false")
(!do
(!line 810)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) "!false"))(!if (!eq (!index (!index self "t") "token") "...")
(!do
(!line 812)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) "!vararg"))(!if (!eq (!index (!index self "t") "token") "{")
(!do
(!line 814)(!callmeth self constructor )
(!line 815)(!return ))(!if (!eq (!index (!index self "t") "token") "function")
(!do
(!line 817)(!callmeth self next )
(!line 818)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) "(!lambda ")
(!line 819)(!callmeth self body !false (!index self "linenumber"))
(!line 820)(!return ))(!do
(!line 822)(!callmeth self suffixedexp one)
(!line 823)(!return ))))))))))
(!line 825)(!callmeth self next )))

(!line 828)(!define unop ("not": "(!not " "-": "(!neg " "#": "(!len " ))
(!line 833)(!define binop ("+": "(!add " "-": "(!sub " "*": "(!mul " "/": "(!div " "%": "(!mod " "^": "(!pow " "..": "(!concat " "~=": "(!ne " "==": "(!eq " "<=": "(!le " "<": "(!lt " ">=": "(!ge " ">": "(!gt " "and": "(!and " "or": "(!or " ))
(!line 850)(!define priority ("+": (6 6) "-": (6 6) "*": (7 7) "/": (7 7) "%": (7 7) "^": (10 9) "..": (5 4) "~=": (3 3) "==": (3 3) "<=": (3 3) "<": (3 3) ">=": (3 3) ">": (3 3) "and": (2 2) "or": (1 1) ))
(!line 869)(!assign (!index P "expr") (!lambda (self one limit)
(!line 871)(!assign limit (!or limit 0))
(!line 872)(!define sav (!index self "out"))
(!line 873)(!assign (!index self "out") ())
(!line 874)(!define uop (!index unop (!index (!index self "t") "token")))
(!line 875)(!if uop
(!do
(!line 876)(!callmeth self next )
(!line 877)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) uop)
(!line 878)(!callmeth self expr !false 8)
(!line 879)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ")"))(!do
(!line 881)(!assign pos (!callmeth self simpleexpr one))))
(!line 883)(!define out (!call tconcat (!index self "out")))
(!line 884)(!define op (!index binop (!index (!index self "t") "token")))
(!line 885)(!define prior (!index priority (!index (!index self "t") "token")))
(!line 886)(!while (!and op (!gt (!index prior 1) limit))

(!line 887)(!callmeth self next )
(!line 888)(!assign (!index self "out") (op out " "))
(!line 889)(!callmeth self expr !false (!index prior 2))
(!line 890)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ")")
(!line 891)(!assign out (!call tconcat (!index self "out")))
(!line 892)(!assign op (!index binop (!index (!index self "t") "token")))
(!line 893)(!assign prior (!index priority (!index (!index self "t") "token"))))
(!line 895)(!assign (!index self "out") sav)
(!line 896)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) out)))

(!line 899)(!assign (!index P "block") (!lambda (self)
(!line 901)(!callmeth self statlist )
(!line 902)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ")")))

(!line 905)(!assign (!index P "assignment") (!lambda (self n line)
(!line 906)(!if (!callmeth1 self testnext ",")
(!do
(!line 908)(!if (!eq n 1)
(!do
(!line 909)(!define var (!index (!index self "out") (!len (!index self "out"))))
(!line 910)(!assign (!index (!index self "out") (!len (!index self "out"))) "(!line ")
(!line 911)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) line)
(!line 912)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ")(!massign (")
(!line 913)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) var)))
(!line 915)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) " ")
(!line 916)(!callmeth self suffixedexp )
(!line 917)(!callmeth self assignment (!add n 1)))(!do
(!line 920)(!callmeth self checknext "=")
(!line 921)(!if (!eq n 1)
(!do
(!line 922)(!define var (!index (!index self "out") (!len (!index self "out"))))
(!line 923)(!assign (!index (!index self "out") (!len (!index self "out"))) "(!line ")
(!line 924)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) line)
(!line 925)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ")(!assign ")
(!line 926)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) var)
(!line 927)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) " "))(!do
(!line 929)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ") (")))
(!line 931)(!callmeth self explist )
(!line 932)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ")")
(!line 933)(!if (!ne n 1)
(!do
(!line 934)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ")")))))))

(!line 939)(!assign (!index P "breakstat") (!lambda (self line)
(!line 940)(!callmeth self next )
(!line 941)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) "(!line ")
(!line 942)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) line)
(!line 943)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ")(!break)")))

(!line 946)(!assign (!index P "gotostat") (!lambda (self line)
(!line 947)(!callmeth self next )
(!line 948)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) "(!line ")
(!line 949)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) line)
(!line 950)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ")(!goto ")
(!line 951)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) (!callmeth self str_checkname ))
(!line 952)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ")")))

(!line 955)(!assign (!index P "labelstat") (!lambda (self name line)
(!line 957)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) "(!line ")
(!line 958)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) line)
(!line 959)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ")(!label ")
(!line 960)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) name)
(!line 961)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ")")
(!line 962)(!callmeth self checknext "::")))

(!line 965)(!assign (!index P "whilestat") (!lambda (self line)
(!line 967)(!callmeth self next )
(!line 968)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) "(!line ")
(!line 969)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) line)
(!line 970)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ")(!while ")
(!line 971)(!callmeth self expr !true)
(!line 972)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) "\x0A")
(!line 973)(!callmeth self checknext "do")
(!line 974)(!callmeth self block )
(!line 975)(!callmeth self check_match "end" "while" line)))

(!line 978)(!assign (!index P "repeatstat") (!lambda (self line)
(!line 980)(!callmeth self next )
(!line 981)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) "(!line ")
(!line 982)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) line)
(!line 983)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ")(!repeat")
(!line 984)(!callmeth self statlist )
(!line 985)(!callmeth self check_match "until" "repeat" line)
(!line 986)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) "\x0A")
(!line 987)(!callmeth self expr !true)
(!line 988)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ")")))

(!line 991)(!assign (!index P "forbody") (!lambda (self name)
(!line 993)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) "\x0A")
(!line 994)(!callmeth self checknext "do")
(!line 995)(!if name
(!do
(!line 996)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) "(!define ")
(!line 997)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) name)
(!line 998)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) " ")
(!line 999)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) name)
(!line 1000)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ")")))
(!line 1002)(!callmeth self block )))

(!line 1005)(!assign (!index P "fornum") (!lambda (self name line)
(!line 1007)(!callmeth self checknext "=")
(!line 1008)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) "(!line ")
(!line 1009)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) line)
(!line 1010)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ")(!loop ")
(!line 1011)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) name)
(!line 1012)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) " ")
(!line 1014)(!callmeth self expr !true)
(!line 1015)(!callmeth self checknext ",")
(!line 1016)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) " ")
(!line 1017)(!callmeth self expr !true)
(!line 1018)(!if (!callmeth1 self testnext ",")
(!do
(!line 1019)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) " ")
(!line 1020)(!callmeth self expr !true))(!do
(!line 1022)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) " 1")))
(!line 1024)(!callmeth self forbody name)))

(!line 1027)(!assign (!index P "forlist") (!lambda (self name line)
(!line 1029)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) "(!line ")
(!line 1030)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) line)
(!line 1031)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ")(!for (")
(!line 1032)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) name)
(!line 1033)(!while (!callmeth1 self testnext ",")

(!line 1034)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) " ")
(!line 1035)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) (!callmeth self str_checkname )))
(!line 1037)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ") (")
(!line 1038)(!callmeth self checknext "in")
(!line 1039)(!assign line (!index self "linenumber"))
(!line 1040)(!callmeth self explist )
(!line 1041)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ")")
(!line 1042)(!callmeth self forbody )))

(!line 1045)(!assign (!index P "forstat") (!lambda (self line)
(!line 1047)(!callmeth self next )
(!line 1048)(!define name (!callmeth self str_checkname ))
(!line 1049)(!if (!eq (!index (!index self "t") "token") "=")
(!do
(!line 1050)(!callmeth self fornum name line))(!if (!or (!eq (!index (!index self "t") "token") ",") (!eq (!index (!index self "t") "token") "in"))
(!do
(!line 1053)(!callmeth self forlist name line))(!do
(!line 1055)(!callmeth self syntaxerror "'=' or 'in' expected"))))
(!line 1057)(!callmeth self check_match "end" "for" line)))

(!line 1060)(!assign (!index P "test_then_block") (!lambda (self)
(!line 1062)(!callmeth self next )
(!line 1063)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) "(!if ")
(!line 1064)(!callmeth self expr !true)
(!line 1065)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) "\x0A")
(!line 1066)(!callmeth self checknext "then")
(!line 1067)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) "(!do")
(!line 1068)(!callmeth self block )))

(!line 1071)(!assign (!index P "ifstat") (!lambda (self line)
(!line 1073)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) "(!line ")
(!line 1074)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) line)
(!line 1075)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ")")
(!line 1076)(!callmeth self test_then_block )
(!line 1077)(!define n 1)
(!line 1078)(!while (!eq (!index (!index self "t") "token") "elseif")

(!line 1079)(!callmeth self test_then_block )
(!line 1080)(!assign n (!add n 1)))
(!line 1082)(!if (!callmeth1 self testnext "else")
(!do
(!line 1083)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) "(!do")
(!line 1084)(!callmeth self block )))
(!line 1086)(!callmeth self check_match "end" "if" line)
(!line 1087)(!loop i 1 n 1
(!define i i)
(!line 1088)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ")"))))

(!line 1092)(!assign (!index P "localfunc") (!lambda (self line)
(!line 1093)(!define name (!callmeth self str_checkname ))
(!line 1094)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) "(!line ")
(!line 1095)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) line)
(!line 1096)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ")(!define ")
(!line 1097)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) name)
(!line 1098)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ")(!assign ")
(!line 1099)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) name)
(!line 1100)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) " (!lambda ")
(!line 1101)(!callmeth self body !false (!index self "linenumber"))
(!line 1102)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ")\x0A")))

(!line 1105)(!assign (!index P "localstat") (!lambda (self line)
(!line 1107)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) "(!line ")
(!line 1108)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) line)
(!line 1109)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ")(!define ")
(!line 1110)(!define multi !false)
(!line 1111)(!repeat
(!line 1112)(!define name (!callmeth self str_checkname ))
(!line 1113)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) name)
(!line 1114)(!if (!eq (!index (!index self "t") "token") ",")
(!do
(!line 1115)(!if (!not multi)
(!do
(!line 1116)(!assign multi !true)
(!line 1117)(!assign (!index (!index self "out") (!len (!index self "out"))) "(")
(!line 1118)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) name)))
(!line 1120)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) " ")))
(!not (!callmeth self testnext ",")))
(!line 1123)(!if multi
(!do
(!line 1124)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ")")))
(!line 1126)(!if (!callmeth1 self testnext "=")
(!do
(!line 1127)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) " ")
(!line 1128)(!if multi
(!do
(!line 1129)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) "(")))
(!line 1131)(!callmeth self explist )
(!line 1132)(!if multi
(!do
(!line 1133)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ")")))))
(!line 1136)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ")")))

(!line 1139)(!assign (!index P "funcname") (!lambda (self)
(!line 1141)(!define ismethod !false)
(!line 1142)(!define name (!callmeth self str_checkname ))
(!line 1143)(!while (!eq (!index (!index self "t") "token") ".")

(!line 1144)(!define sav (!index self "out"))
(!line 1145)(!assign (!index self "out") ("(!index " name " "))
(!line 1146)(!callmeth self fieldsel )
(!line 1147)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ")")
(!line 1148)(!assign name (!call tconcat (!index self "out")))
(!line 1149)(!assign (!index self "out") sav))
(!line 1151)(!if (!eq (!index (!index self "t") "token") ":")
(!do
(!line 1152)(!assign ismethod !true)
(!line 1153)(!define sav (!index self "out"))
(!line 1154)(!assign (!index self "out") ("(!index " name " "))
(!line 1155)(!callmeth self fieldsel )
(!line 1156)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ")")
(!line 1157)(!assign name (!call tconcat (!index self "out")))
(!line 1158)(!assign (!index self "out") sav)))
(!line 1160)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) name)
(!line 1161)(!return ismethod)))

(!line 1164)(!assign (!index P "funcstat") (!lambda (self line)
(!line 1166)(!callmeth self next )
(!line 1167)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) "(!line ")
(!line 1168)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) line)
(!line 1169)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ")(!assign ")
(!line 1170)(!define ismethod (!callmeth self funcname ))
(!line 1171)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) " (!lambda ")
(!line 1172)(!callmeth self body ismethod line)
(!line 1173)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ")\x0A")))

(!line 1176)(!assign (!index P "exprstat") (!lambda (self line)
(!line 1178)(!define sav (!index self "out"))
(!line 1179)(!assign (!index self "out") ())
(!line 1180)(!callmeth self suffixedexp )
(!line 1181)(!define out (!call tconcat (!index self "out")))
(!line 1182)(!assign (!index self "out") sav)
(!line 1183)(!if (!or (!eq (!index (!index self "t") "token") "=") (!eq (!index (!index self "t") "token") ","))
(!do
(!line 1184)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) out)
(!line 1185)(!callmeth self assignment 1 line))(!do
(!line 1187)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) "(!line ")
(!line 1188)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) line)
(!line 1189)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ")")
(!line 1190)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) out)))))

(!line 1194)(!assign (!index P "retstat") (!lambda (self line)
(!line 1196)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) "(!line ")
(!line 1197)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) line)
(!line 1198)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ")(!return ")
(!line 1199)(!if (!and (!not (!callmeth self block_follow !true)) (!ne (!index (!index self "t") "token") ";"))
(!do
(!line 1200)(!callmeth self explist )))
(!line 1202)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ")")
(!line 1203)(!callmeth self testnext ";")))

(!line 1206)(!assign (!index P "statement") (!lambda (self)
(!line 1207)(!define line (!index self "linenumber"))
(!line 1208)(!if (!eq (!index (!index self "t") "token") ";")
(!do
(!line 1210)(!callmeth self next ))(!if (!eq (!index (!index self "t") "token") "if")
(!do
(!line 1213)(!callmeth self ifstat line))(!if (!eq (!index (!index self "t") "token") "while")
(!do
(!line 1216)(!callmeth self whilestat line))(!if (!eq (!index (!index self "t") "token") "do")
(!do
(!line 1219)(!callmeth self next )
(!line 1220)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) "(!line ")
(!line 1221)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) line)
(!line 1222)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ")(!do")
(!line 1223)(!callmeth self block )
(!line 1224)(!callmeth self check_match "end" "do" line))(!if (!eq (!index (!index self "t") "token") "for")
(!do
(!line 1227)(!callmeth self forstat line))(!if (!eq (!index (!index self "t") "token") "repeat")
(!do
(!line 1230)(!callmeth self repeatstat line))(!if (!eq (!index (!index self "t") "token") "function")
(!do
(!line 1233)(!callmeth self funcstat line))(!if (!eq (!index (!index self "t") "token") "local")
(!do
(!line 1236)(!callmeth self next )
(!line 1237)(!if (!callmeth1 self testnext "function")
(!do
(!line 1238)(!callmeth self localfunc line))(!do
(!line 1240)(!callmeth self localstat line))))(!if (!eq (!index (!index self "t") "token") "::")
(!do
(!line 1244)(!callmeth self next )
(!line 1245)(!callmeth self labelstat (!callmeth self str_checkname ) line))(!if (!eq (!index (!index self "t") "token") "return")
(!do
(!line 1248)(!callmeth self next )
(!line 1249)(!callmeth self retstat line))(!if (!eq (!index (!index self "t") "token") "break")
(!do
(!line 1252)(!callmeth self breakstat line))(!if (!eq (!index (!index self "t") "token") "goto")
(!do
(!line 1255)(!callmeth self gotostat line))(!do
(!line 1258)(!callmeth self exprstat line))))))))))))))))

(!line 1262)(!assign (!index P "mainfunc") (!lambda (self)
(!line 1263)(!callmeth self next )
(!line 1264)(!callmeth self statlist )
(!line 1265)(!callmeth self check "<eof>")))

(!line 1268)(!define translate)(!assign translate (!lambda (s fname)
(!line 1269)(!define p (!call setmetatable () ("__index": P)))
(!line 1270)(!callmeth p setinput s fname)
(!line 1271)(!if (!eq (!index p "current") "\x1B")
(!do
(!line 1272)(!return s)))
(!line 1274)(!callmeth p shebang )
(!line 1275)(!assign (!index p "out") ("(!line " (!call quote fname) " " (!index p "linenumber") ")"))
(!line 1276)(!callmeth p mainfunc )
(!line 1277)(!assign (!index (!index p "out") (!add (!len (!index p "out")) 1)) "\x0A; end of generation")
(!line 1278)(!return (!call tconcat (!index p "out")))))

(!line 1281)(!assign (!index _G "_COMPILER") translate)
(!line 1283)(!define arg arg)
(!line 1284)(!define fname (!and arg (!index arg 1)))
(!line 1285)(!if (!and (!not (!call (!index debug "getinfo") 3)) fname)
(!do
(!line 1286)(!define (f msg) ((!call (!index (!index _G "io") "open") fname "r")))
(!line 1287)(!if (!not f)
(!do
(!line 1288)(!call error msg)))
(!line 1290)(!define s (!callmeth f read "*a"))
(!line 1291)(!callmeth f close )
(!line 1292)(!define code (!call translate s (!concat "@" fname)))
(!line 1293)(!call print "; bootstrap")
(!line 1294)(!call print code)))
; end of generation
