; bootstrap
(!line "@lua/lunokhod.lua" 1)
(!line 8)(!define _G _G)
(!line 9)(!define assert assert)
(!line 10)(!define band (!index bit "band"))
(!line 11)(!define char (!index string "char"))
(!line 12)(!define error error)
(!line 13)(!define _find (!index string "find"))
(!line 14)(!define format (!index string "format"))
(!line 15)(!define quote (!index tvm "quote"))
(!line 16)(!define rshift (!index bit "rshift"))
(!line 17)(!define setmetatable setmetatable)
(!line 18)(!define sub (!index string "sub"))
(!line 19)(!define tconcat (!index table "concat"))
(!line 20)(!define tonumber tonumber)
(!line 22)(!define find)(!assign find(!lambda (s patt)
(!line 23)(!return (!call _find s patt 1 !true))))

(!line 26)(!define digit "0123456789")
(!line 27)(!define xdigit (!concat "ABCDEF" (!concat "abcdef" digit)))
(!line 29)(!define alpha (!concat "ABCDEFGHIJKLMNOPQRSTUVWXYZ" (!concat "abcdefghijklmnopqrstuvwxyz" "_")))
(!line 31)(!define alnum (!concat alpha digit))
(!line 32)(!define newline "\x0A\x0D")
(!line 33)(!define space " \x0C\x09\x0B\x0A\x0D")
(!line 35)(!define tokens ("and": !true "break": !true "do": !true "else": !true "elseif": !true "end": !true "false": !true "for": !true "function": !true "goto": !true "if": !true "in": !true "local": !true "nil": !true "not": !true "or": !true "repeat": !true "return": !true "then": !true "true": !true "until": !true "while": !true ))
(!line 60)(!define L ())
(!line 62)(!assign (!index L "_resetbuffer")(!lambda (self)
(!line 63)(!assign (!index self "buff") ())))

(!line 66)(!assign (!index L "_buffremove")(!lambda (self n)
(!line 67)(!loop _ 1 n 1
(!define _ _)
(!line 68)(!assign (!index (!index self "buff") (!len (!index self "buff"))) !nil))))

(!line 72)(!assign (!index L "_next")(!lambda (self)
(!line 73)(!assign (!index self "pos") (!add (!index self "pos") 1))
(!line 74)(!define c (!call sub (!index self "z") (!index self "pos") (!index self "pos")))
(!line 75)(!assign (!index self "current") (!or (!and (!ne c "") c) "<eof>"))
(!line 76)(!return (!index self "current"))))

(!line 79)(!assign (!index L "_save_and_next")(!lambda (self)
(!line 80)(!callmeth self _save (!index self "current"))
(!line 81)(!callmeth self _next )))

(!line 84)(!assign (!index L "_save")(!lambda (self c)
(!line 85)(!assign (!index (!index self "buff") (!add (!len (!index self "buff")) 1)) c)))

(!line 88)(!assign (!index L "_txtToken")(!lambda (self token)
(!line 89)(!if (!or (!or (!eq token "<name>") (!eq token "<string>")) (!eq token "<number>"))
(!do
(!line 92)(!return (!call tconcat (!index self "buff"))))(!do
(!line 94)(!return token)))))

(!line 98)(!define chunkid)(!assign chunkid(!lambda (source max)
(!line 99)(!define first (!call sub source 1 1))
(!line 100)(!if (!eq first "=")
(!do
(!line 101)(!return (!call sub source 2 (!add 1 max))))(!if (!eq first "@")
(!do
(!line 103)(!if (!le (!len source) max)
(!do
(!line 104)(!return (!call sub source 2)))(!do
(!line 106)(!return (!concat "..." (!call sub source (!neg max)))))))(!do
(!line 109)(!assign source (!call sub source 1 (!sub (!or (!call1 find source "\x0A") (!len source)) 1)))
(!line 110)(!assign source (!or (!and (!lt (!len source) (!sub max 11)) source) (!concat (!call sub source 1 (!sub max 14)) "...")))
(!line 111)(!return (!concat "[string \"" (!concat source "\"]"))))))))

(!line 115)(!assign (!index L "_lexerror")(!lambda (self msg token)
(!line 116)(!assign msg (!call format "%s:%d: %s" (!call chunkid (!index self "source") 60) (!index self "linenumber") msg))
(!line 117)(!if token
(!do
(!line 118)(!assign msg (!call format "%s near %s" msg (!callmeth self _txtToken token)))))
(!line 120)(!call error msg)))

(!line 123)(!assign (!index L "syntaxerror")(!lambda (self msg)
(!line 124)(!callmeth self _lexerror msg (!index (!index self "t") "token"))))

(!line 127)(!assign (!index L "_inclinenumber")(!lambda (self)
(!line 128)(!define old (!index self "current"))
(!line 129)(!call assert (!call find newline (!index self "current")))
(!line 130)(!callmeth self _next )
(!line 131)(!if (!and (!call1 find newline (!index self "current")) (!ne (!index self "current") old))
(!do
(!line 132)(!callmeth self _next )))
(!line 134)(!assign (!index self "linenumber") (!add (!index self "linenumber") 1))))

(!line 137)(!assign (!index L "setinput")(!lambda (self z source)
(!line 138)(!assign (!index self "_lookahead") ("token": !false "seminfo": !false))
(!line 139)(!assign (!index self "z") z)
(!line 140)(!assign (!index self "linenumber") 1)
(!line 141)(!assign (!index self "lastline") 1)
(!line 142)(!assign (!index self "source") source)
(!line 143)(!assign (!index self "buff") ())
(!line 144)(!assign (!index self "pos") 0)
(!line 145)(!assign (!index self "t") ("token": (!callmeth1 self _next ) "seminfo": !false))))

(!line 154)(!assign (!index L "_check_next1")(!lambda (self c)
(!line 155)(!if (!eq (!index self "current") c)
(!do
(!line 156)(!callmeth self _next )
(!line 157)(!return !true)))))

(!line 161)(!assign (!index L "_check_next2")(!lambda (self set)
(!line 162)(!if (!call1 find set (!index self "current"))
(!do
(!line 163)(!callmeth self _save_and_next )
(!line 164)(!return !true)))))

(!line 168)(!assign (!index L "_read_numeral")(!lambda (self tok)
(!line 169)(!define expo "Ee")
(!line 170)(!define first (!index self "current"))
(!line 171)(!call assert (!call find digit (!index self "current")))
(!line 172)(!callmeth self _save_and_next )
(!line 173)(!if (!and (!eq first "0") (!callmeth self _check_next2 "Xx"))
(!do
(!line 174)(!assign expo "Pp")))
(!line 176)(!while !true

(!line 177)(!if (!callmeth1 self _check_next2 expo)
(!do
(!line 178)(!callmeth self _check_next2 "+-"))(!if (!or (!call1 find xdigit (!index self "current")) (!eq (!index self "current") "."))
(!do
(!line 180)(!callmeth self _save_and_next ))(!do
(!line 182)(!break)))))
(!line 185)(!assign (!index tok "seminfo") (!call tconcat (!index self "buff")))
(!line 186)(!if (!not (!call tonumber (!index tok "seminfo")))
(!do
(!line 187)(!callmeth self _lexerror "malformed number" "<number>")))
(!line 189)(!return "<number>")))

(!line 192)(!assign (!index L "_skip_sep")(!lambda (self)
(!line 193)(!define count 0)
(!line 194)(!define s (!index self "current"))
(!line 195)(!call assert (!or (!eq s "[") (!eq s "]")))
(!line 196)(!callmeth self _save_and_next )
(!line 197)(!while (!eq (!index self "current") "=")

(!line 198)(!callmeth self _save_and_next )
(!line 199)(!assign count (!add count 1)))
(!line 201)(!return (!or (!and (!eq (!index self "current") s) count) (!sub (!neg count) 1)))))

(!line 204)(!assign (!index L "_read_long_string")(!lambda (self tok sep)
(!line 205)(!define line (!index self "linenumber"))
(!line 206)(!callmeth self _save_and_next )
(!line 207)(!if (!call1 find newline (!index self "current"))
(!do
(!line 208)(!callmeth self _inclinenumber )))
(!line 210)(!while !true

(!line 211)(!if (!eq (!index self "current") "<eof>")
(!do
(!line 212)(!define what (!or (!and tok "string") "comment"))
(!line 213)(!define msg (!call format "unfinished long %s (starting at line %d)" what line))
(!line 214)(!callmeth self _lexerror msg "<eof>"))(!if (!eq (!index self "current") "]")
(!do
(!line 216)(!if (!eq (!callmeth1 self _skip_sep ) sep)
(!do
(!line 217)(!callmeth self _save_and_next )
(!line 218)(!break))))(!if (!or (!eq (!index self "current") "\x0A") (!eq (!index self "current") "\x0D"))
(!do
(!line 221)(!callmeth self _save "\x0A")
(!line 222)(!callmeth self _inclinenumber )
(!line 223)(!if (!not tok)
(!do
(!line 224)(!callmeth self _resetbuffer ))))(!do
(!line 227)(!if tok
(!do
(!line 228)(!callmeth self _save_and_next ))(!do
(!line 230)(!callmeth self _next ))))))))
(!line 234)(!if tok
(!do
(!line 235)(!assign (!index tok "seminfo") (!call sub (!call tconcat (!index self "buff")) (!add 3 sep) (!sub (!neg 3) sep)))
(!line 236)(!return "<string>")))))

(!line 240)(!assign (!index L "_esccheck")(!lambda (self cond msg)
(!line 241)(!if (!not cond)
(!do
(!line 242)(!if (!ne (!index self "current") "<eof>")
(!do
(!line 243)(!callmeth self _save_and_next )))
(!line 245)(!callmeth self _lexerror msg "<string>")))))

(!line 249)(!assign (!index L "_gethexa")(!lambda (self)
(!line 250)(!callmeth self _save_and_next )
(!line 251)(!define c (!index self "current"))
(!line 252)(!callmeth self _esccheck (!call find xdigit c) "hexadecimal digit expected")
(!line 253)(!return (!call tonumber c 16))))

(!line 256)(!assign (!index L "_readhexaesc")(!lambda (self)
(!line 257)(!define r (!callmeth self _gethexa ))
(!line 258)(!assign r (!add (!mul 16 r) (!callmeth self _gethexa )))
(!line 259)(!callmeth self _buffremove 2)
(!line 260)(!return (!call char r))))

(!line 263)(!assign (!index L "_readutf8esc")(!lambda (self)
(!line 264)(!define i 4)
(!line 265)(!callmeth self _save_and_next )
(!line 266)(!callmeth self _esccheck (!eq (!index self "current") "{") "missing '{'")
(!line 267)(!define r (!callmeth self _gethexa ))
(!line 268)(!callmeth self _save_and_next )
(!line 269)(!while (!call1 find xdigit (!index self "current"))

(!line 270)(!assign i (!add i 1))
(!line 271)(!assign r (!add (!mul 16 r) (!call tonumber (!index self "current") 16)))
(!line 272)(!callmeth self _esccheck (!le r 0x10FFFF) "UTF-8 value too large")
(!line 273)(!callmeth self _save_and_next ))
(!line 275)(!callmeth self _esccheck (!eq (!index self "current") "}") "missing '}'")

(!line 276)(!callmeth self _next )
(!line 277)(!callmeth self _buffremove i)
(!line 278)(!return r)))

(!line 281)(!assign (!index L "_utf8esc")(!lambda (self)
(!line 282)(!define n (!callmeth self _readutf8esc ))
(!line 283)(!if (!lt n 0x80)
(!do
(!line 284)(!callmeth self _save (!call char n)))(!if (!lt n 0x800)
(!do
(!line 286)(!callmeth self _save (!call char (!add 0xC0 (!call rshift n 6))))
(!line 287)(!callmeth self _save (!call char (!add 0x80 (!call band n 0x3F)))))(!if (!lt n 0x10000)
(!do
(!line 289)(!callmeth self _save (!call char (!add 0xE0 (!call rshift n 12))))
(!line 290)(!callmeth self _save (!call char (!add 0x80 (!call band (!call rshift n 6) 0x3F))))
(!line 291)(!callmeth self _save (!call char (!add 0x80 (!call band n 0x3F)))))(!do
(!line 293)(!callmeth self _save (!call char (!add 0xF0 (!call rshift n 18))))
(!line 294)(!callmeth self _save (!call char (!add 0x80 (!call band (!call rshift n 12) 0x3F))))
(!line 295)(!callmeth self _save (!call char (!add 0x80 (!call band (!call rshift n 6) 0x3F))))
(!line 296)(!callmeth self _save (!call char (!add 0x80 (!call band n 0x3F))))))))))

(!line 300)(!assign (!index L "_readdecesc")(!lambda (self)
(!line 301)(!define r 0)
(!line 302)(!define i 0)
(!line 303)(!while (!and (!lt i 3) (!call find digit (!index self "current")))

(!line 304)(!assign r (!add (!mul 10 r) (!call tonumber (!index self "current"))))
(!line 305)(!callmeth self _save_and_next )
(!line 306)(!assign i (!add i 1)))
(!line 308)(!callmeth self _esccheck (!le r 255) "decimal escape too large")
(!line 309)(!callmeth self _buffremove i)
(!line 310)(!return (!call char r))))

(!line 313)(!assign (!index L "_read_string")(!lambda (self del tok)
(!line 314)(!callmeth self _save_and_next )
(!line 315)(!while (!ne (!index self "current") del)

(!line 316)(!if (!eq (!index self "current") "<eof>")
(!do
(!line 317)(!callmeth self _lexerror "unfinished string" "<eof>"))(!if (!or (!eq (!index self "current") "\x0A") (!eq (!index self "current") "\x0D"))
(!do
(!line 320)(!callmeth self _lexerror "unfinished string" "<string>"))(!if (!eq (!index self "current") "\\")
(!do
(!line 322)(!define c)
(!line 323)(!callmeth self _save_and_next )
(!line 324)(!if (!eq (!index self "current") "a")
(!do
(!line 325)(!assign c "\x07")
(!line 326)(!goto read_save))(!if (!eq (!index self "current") "b")
(!do
(!line 328)(!assign c "b")
(!line 329)(!goto read_save))(!if (!eq (!index self "current") "f")
(!do
(!line 331)(!assign c "\x0C")
(!line 332)(!goto read_save))(!if (!eq (!index self "current") "n")
(!do
(!line 334)(!assign c "\x0A")
(!line 335)(!goto read_save))(!if (!eq (!index self "current") "r")
(!do
(!line 337)(!assign c "\x0D")
(!line 338)(!goto read_save))(!if (!eq (!index self "current") "t")
(!do
(!line 340)(!assign c "\x09")
(!line 341)(!goto read_save))(!if (!eq (!index self "current") "v")
(!do
(!line 343)(!assign c "\x0B")
(!line 344)(!goto read_save))(!if (!eq (!index self "current") "x")
(!do
(!line 346)(!assign c (!callmeth self _readhexaesc ))
(!line 347)(!goto read_save))(!if (!eq (!index self "current") "u")
(!do
(!line 349)(!callmeth self _utf8esc )
(!line 350)(!goto no_save))(!if (!or (!eq (!index self "current") "\x0A") (!eq (!index self "current") "\x0D"))
(!do
(!line 353)(!callmeth self _inclinenumber )
(!line 354)(!assign c "\x0A")
(!line 355)(!goto only_save))(!if (!eq (!index self "current") "\\")
(!do
(!line 357)(!assign c "\\")
(!line 358)(!goto read_save))(!if (!eq (!index self "current") "\"")
(!do
(!line 360)(!assign c "\"")
(!line 361)(!goto read_save))(!if (!eq (!index self "current") "'")
(!do
(!line 363)(!assign c "'")
(!line 364)(!goto read_save))(!if (!eq (!index self "current") "<eof>")
(!do
(!line 366)(!goto no_save))(!if (!eq (!index self "current") "z")
(!do
(!line 369)(!callmeth self _buffremove 1)
(!line 370)(!callmeth self _next )
(!line 371)(!while (!call1 find space (!index self "current"))

(!line 372)(!if (!call1 find newline (!index self "current"))
(!do
(!line 373)(!callmeth self _inclinenumber ))(!do
(!line 375)(!callmeth self _next ))))
(!line 378)(!goto no_save))(!do
(!line 380)(!callmeth self _esccheck (!call find digit (!index self "current")) "invalid escape sequence")
(!line 381)(!assign c (!callmeth self _readdecesc ))
(!line 382)(!goto only_save)))))))))))))))))
(!line 384)(!label read_save)
(!line 385)(!callmeth self _next )
(!line 386)(!label only_save)
(!line 387)(!callmeth self _buffremove 1)
(!line 388)(!callmeth self _save c)
(!line 389)(!label no_save))(!do
(!line 391)(!callmeth self _save_and_next ))))))
(!line 394)(!callmeth self _save_and_next )
(!line 395)(!assign (!index tok "seminfo") (!call sub (!call tconcat (!index self "buff")) 2 (!neg 2)))
(!line 396)(!return "<string>")))

(!line 399)(!assign (!index L "_llex")(!lambda (self tok)
(!line 400)(!callmeth self _resetbuffer )
(!line 401)(!while !true

(!line 402)(!if (!or (!eq (!index self "current") "\x0A") (!eq (!index self "current") "\x0D"))
(!do
(!line 404)(!callmeth self _inclinenumber ))(!if (!or (!or (!or (!eq (!index self "current") " ") (!eq (!index self "current") "\x0C")) (!eq (!index self "current") "\x09")) (!eq (!index self "current") "\x0B"))
(!do
(!line 409)(!callmeth self _next ))(!if (!eq (!index self "current") "-")
(!do
(!line 411)(!callmeth self _next )
(!line 412)(!if (!ne (!index self "current") "-")
(!do
(!line 413)(!return "-")))
(!line 415)(!callmeth self _next )
(!line 416)(!if (!eq (!index self "current") "[")
(!do
(!line 417)(!define sep (!callmeth self _skip_sep ))
(!line 418)(!callmeth self _resetbuffer )
(!line 419)(!if (!ge sep 0)
(!do
(!line 420)(!callmeth self _read_long_string !nil sep)
(!line 421)(!callmeth self _resetbuffer ))))(!do
(!line 424)(!while (!and (!not (!call find newline (!index self "current"))) (!ne (!index self "current") "<eof>"))

(!line 425)(!callmeth self _next )))))(!if (!eq (!index self "current") "[")
(!do
(!line 429)(!define sep (!callmeth self _skip_sep ))
(!line 430)(!if (!ge sep 0)
(!do
(!line 431)(!return (!callmeth self _read_long_string tok sep)))(!if (!ne sep (!neg 1))
(!do
(!line 433)(!callmeth self _lexerror "invalid long string delimiter" "<string>"))))
(!line 435)(!return "["))(!if (!eq (!index self "current") "=")
(!do
(!line 437)(!callmeth self _next )
(!line 438)(!if (!callmeth1 self _check_next1 "=")
(!do
(!line 439)(!return "=="))(!do
(!line 441)(!return "="))))(!if (!eq (!index self "current") "<")
(!do
(!line 444)(!callmeth self _next )
(!line 445)(!if (!callmeth1 self _check_next1 "=")
(!do
(!line 446)(!return "<="))(!if (!callmeth1 self _check_next1 "<")
(!do
(!line 448)(!return "<<"))(!do
(!line 450)(!return "<")))))(!if (!eq (!index self "current") ">")
(!do
(!line 453)(!callmeth self _next )
(!line 454)(!if (!callmeth1 self _check_next1 "=")
(!do
(!line 455)(!return ">="))(!if (!callmeth1 self _check_next1 ">")
(!do
(!line 457)(!return ">>"))(!do
(!line 459)(!return ">")))))(!if (!eq (!index self "current") "/")
(!do
(!line 462)(!callmeth self _next )
(!line 463)(!if (!callmeth1 self _check_next1 "/")
(!do
(!line 464)(!return "//"))(!do
(!line 466)(!return "/"))))(!if (!eq (!index self "current") "~")
(!do
(!line 469)(!callmeth self _next )
(!line 470)(!if (!callmeth1 self _check_next1 "=")
(!do
(!line 471)(!return "~="))(!do
(!line 473)(!return "~"))))(!if (!eq (!index self "current") ":")
(!do
(!line 476)(!callmeth self _next )
(!line 477)(!if (!callmeth1 self _check_next1 ":")
(!do
(!line 478)(!return "::"))(!do
(!line 480)(!return ":"))))(!if (!or (!eq (!index self "current") "\"") (!eq (!index self "current") "'"))
(!do
(!line 484)(!return (!callmeth self _read_string (!index self "current") tok)))(!if (!eq (!index self "current") ".")
(!do
(!line 486)(!callmeth self _save_and_next )
(!line 487)(!if (!callmeth1 self _check_next1 ".")
(!do
(!line 488)(!if (!callmeth1 self _check_next1 ".")
(!do
(!line 489)(!return "..."))(!do
(!line 491)(!return "..")))))
(!line 494)(!if (!not (!call find digit (!index self "current")))
(!do
(!line 495)(!return "."))(!do
(!line 497)(!return (!callmeth self _read_numeral tok)))))(!if (!call1 find digit (!index self "current"))
(!do
(!line 500)(!return (!callmeth self _read_numeral tok)))(!if (!eq (!index self "current") "<eof>")
(!do
(!line 502)(!return "<eof>"))(!do
(!line 504)(!if (!call1 find alpha (!index self "current"))
(!do
(!line 505)(!repeat
(!line 506)(!callmeth self _save_and_next )
(!not (!call find alnum (!index self "current"))))
(!line 508)(!assign (!index tok "seminfo") (!call tconcat (!index self "buff")))
(!line 509)(!if (!index tokens (!index tok "seminfo"))
(!do
(!line 510)(!return (!index tok "seminfo")))(!do
(!line 512)(!return "<name>"))))(!do
(!line 515)(!define c (!index self "current"))
(!line 516)(!callmeth self _next )
(!line 517)(!return c)))))))))))))))))))))

(!line 523)(!assign (!index L "next")(!lambda (self)
(!line 524)(!assign (!index self "lastline") (!index self "linenumber"))
(!line 525)(!if (!index (!index self "_lookahead") "token")
(!do
(!line 526)(!assign (!index (!index self "t") "token") (!index (!index self "_lookahead") "token"))
(!line 527)(!assign (!index (!index self "t") "seminfo") (!index (!index self "_lookahead") "seminfo"))
(!line 528)(!assign (!index (!index self "_lookahead") "token") !false))(!do
(!line 530)(!assign (!index (!index self "t") "token") (!callmeth self _llex (!index self "t")))))))

(!line 534)(!assign (!index L "lookahead")(!lambda (self)
(!line 535)(!call assert (!not (!index (!index self "_lookahead") "token")))
(!line 536)(!assign (!index (!index self "_lookahead") "token") (!callmeth self _llex (!index self "_lookahead")))
(!line 537)(!return (!index (!index self "_lookahead") "token"))))

(!line 540)(!assign (!index L "BOM")(!lambda (self)
(!line 542)(!if (!eq (!index self "current") (!call char 0xEF))
(!do
(!line 543)(!callmeth self _next )
(!line 544)(!if (!eq (!index self "current") (!call char 0xBB))
(!do
(!line 545)(!callmeth self _next )
(!line 546)(!if (!eq (!index self "current") (!call char 0xBF))
(!do
(!line 547)(!callmeth self _next )))))))))

(!line 553)(!assign (!index L "shebang")(!lambda (self)
(!line 554)(!callmeth self BOM )
(!line 555)(!if (!eq (!index self "current") "#")
(!do
(!line 556)(!while (!ne (!index self "current") "\x0A")

(!line 557)(!callmeth self _next ))
(!line 559)(!callmeth self _inclinenumber )))))

(!line 563)(!define P (!call setmetatable () ("__index": L)))
(!line 565)(!assign (!index P "error_expected")(!lambda (self token)
(!line 566)(!callmeth self syntaxerror (!concat token " expected"))))

(!line 569)(!assign (!index P "testnext")(!lambda (self c)
(!line 570)(!if (!eq (!index (!index self "t") "token") c)
(!do
(!line 571)(!callmeth self next )
(!line 572)(!return !true))(!do
(!line 574)(!return !false)))))

(!line 578)(!assign (!index P "check")(!lambda (self c)
(!line 579)(!if (!ne (!index (!index self "t") "token") c)
(!do
(!line 580)(!callmeth self error_expected c)))))

(!line 584)(!assign (!index P "checknext")(!lambda (self c)
(!line 585)(!callmeth self check c)
(!line 586)(!callmeth self next )))

(!line 589)(!assign (!index P "check_match")(!lambda (self what who where)
(!line 590)(!if (!not (!callmeth self testnext what))
(!do
(!line 591)(!if (!eq where (!index self "linenumber"))
(!do
(!line 592)(!callmeth self error_expected what))(!do
(!line 594)(!callmeth self syntaxerror (!call format "%s expected (to close %s at line %d)" what who where))))))))

(!line 599)(!assign (!index P "str_checkname")(!lambda (self)
(!line 600)(!callmeth self check "<name>")
(!line 601)(!define name (!index (!index self "t") "seminfo"))
(!line 602)(!callmeth self next )
(!line 603)(!return name)))

(!line 612)(!assign (!index P "block_follow")(!lambda (self withuntil)
(!line 613)(!if (!or (!or (!or (!eq (!index (!index self "t") "token") "else") (!eq (!index (!index self "t") "token") "elseif")) (!eq (!index (!index self "t") "token") "end")) (!eq (!index (!index self "t") "token") "<eof>"))
(!do
(!line 617)(!return !true))(!if (!eq (!index (!index self "t") "token") "until")
(!do
(!line 619)(!return withuntil))(!do
(!line 621)(!return !false))))))

(!line 625)(!assign (!index P "statlist")(!lambda (self)
(!line 627)(!while (!not (!callmeth self block_follow !true))

(!line 628)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) "\x0A")
(!line 629)(!if (!eq (!index (!index self "t") "token") "return")
(!do
(!line 630)(!callmeth self statement )
(!line 631)(!return )))
(!line 633)(!callmeth self statement ))))

(!line 637)(!assign (!index P "fieldsel")(!lambda (self)
(!line 639)(!callmeth self next )
(!line 640)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) (!call quote (!callmeth self str_checkname )))))

(!line 643)(!assign (!index P "yindex")(!lambda (self)
(!line 645)(!callmeth self next )
(!line 646)(!callmeth self expr !true)
(!line 647)(!callmeth self checknext "]")))

(!line 650)(!assign (!index P "recfield")(!lambda (self)
(!line 652)(!if (!eq (!index (!index self "t") "token") "<name>")
(!do
(!line 653)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) (!call quote (!callmeth self str_checkname ))))(!do
(!line 655)(!callmeth self yindex )))
(!line 657)(!callmeth self checknext "=")
(!line 658)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ": ")
(!line 659)(!callmeth self expr !true)))

(!line 662)(!assign (!index P "field")(!lambda (self)
(!line 664)(!if (!eq (!index (!index self "t") "token") "<name>")
(!do
(!line 665)(!if (!ne (!callmeth1 self lookahead ) "=")
(!do
(!line 666)(!callmeth self expr ))(!do
(!line 668)(!callmeth self recfield ))))(!if (!eq (!index (!index self "t") "token") "[")
(!do
(!line 671)(!callmeth self recfield ))(!do
(!line 673)(!callmeth self expr ))))))

(!line 677)(!assign (!index P "constructor")(!lambda (self)
(!line 679)(!define line (!index self "linenumber"))
(!line 680)(!callmeth self checknext "{")
(!line 681)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) "(")
(!line 682)(!repeat
(!line 683)(!if (!eq (!index (!index self "t") "token") "}")
(!do
(!line 684)(!break)))
(!line 686)(!callmeth self field )
(!line 687)(!if (!or (!eq (!index (!index self "t") "token") ",") (!eq (!index (!index self "t") "token") ";"))
(!do
(!line 688)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) " ")))
(!not (!or (!callmeth1 self testnext ",") (!callmeth self testnext ";"))))
(!line 691)(!callmeth self check_match "}" "{" line)
(!line 692)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ")")))

(!line 695)(!assign (!index P "parlist")(!lambda (self ismethod)
(!line 698)(!if ismethod
(!do
(!line 699)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) "self")))
(!line 701)(!if (!ne (!index (!index self "t") "token") ")")
(!do
(!line 702)(!if ismethod
(!do
(!line 703)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) " ")))
(!line 705)(!repeat
(!line 706)(!if (!eq (!index (!index self "t") "token") "<name>")
(!do
(!line 707)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) (!index (!index self "t") "seminfo"))
(!line 708)(!callmeth self next ))(!if (!eq (!index (!index self "t") "token") "...")
(!do
(!line 710)(!callmeth self next )
(!line 711)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) "!vararg")
(!line 712)(!break))(!do
(!line 714)(!callmeth self syntaxerror "<name> or '...' expected"))))
(!line 716)(!if (!eq (!index (!index self "t") "token") ",")
(!do
(!line 717)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) " ")))
(!not (!callmeth self testnext ",")))))))

(!line 723)(!assign (!index P "body")(!lambda (self ismethod line)
(!line 725)(!define line (!index self "linenumber"))
(!line 726)(!callmeth self checknext "(")
(!line 727)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) "(!lambda (")
(!line 728)(!callmeth self parlist ismethod)
(!line 729)(!callmeth self checknext ")")
(!line 730)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ")")
(!line 731)(!callmeth self statlist )
(!line 732)(!callmeth self check_match "end" "function" line)
(!line 733)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ")")))

(!line 736)(!assign (!index P "explist")(!lambda (self)
(!line 738)(!callmeth self expr )
(!line 739)(!while (!callmeth1 self testnext ",")

(!line 740)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) " ")
(!line 741)(!callmeth self expr ))))

(!line 745)(!assign (!index P "funcargs")(!lambda (self line)
(!line 746)(!if (!eq (!index (!index self "t") "token") "(")
(!do
(!line 748)(!callmeth self next )
(!line 749)(!if (!ne (!index (!index self "t") "token") ")")
(!do
(!line 750)(!callmeth self explist )))
(!line 752)(!callmeth self check_match ")" "(" line))(!if (!eq (!index (!index self "t") "token") "{")
(!do
(!line 755)(!callmeth self constructor ))(!if (!eq (!index (!index self "t") "token") "<string>")
(!do
(!line 758)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) (!call quote (!index (!index self "t") "seminfo")))
(!line 759)(!callmeth self next ))(!do
(!line 761)(!callmeth self syntaxerror "function arguments expected")))))))

(!line 765)(!assign (!index P "primaryexpr")(!lambda (self)
(!line 767)(!if (!eq (!index (!index self "t") "token") "(")
(!do
(!line 768)(!define line (!index self "linenumber"))
(!line 769)(!callmeth self next )
(!line 770)(!callmeth self expr !true)
(!line 771)(!callmeth self check_match ")" "(" line))(!if (!eq (!index (!index self "t") "token") "<name>")
(!do
(!line 773)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) (!callmeth self str_checkname )))(!do
(!line 775)(!callmeth self syntaxerror "unexpected symbol"))))))

(!line 779)(!assign (!index P "suffixedexp")(!lambda (self one)
(!line 782)(!define line (!index self "linenumber"))
(!line 783)(!define sav (!index self "out"))
(!line 784)(!assign (!index self "out") ())
(!line 785)(!callmeth self primaryexpr )
(!line 786)(!define out (!call tconcat (!index self "out")))
(!line 787)(!while !true

(!line 788)(!assign (!index self "out") ())
(!line 789)(!if (!eq (!index (!index self "t") "token") ".")
(!do
(!line 790)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) "(!index ")
(!line 791)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) out)
(!line 792)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) " ")
(!line 793)(!callmeth self fieldsel )
(!line 794)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ")")
(!line 795)(!assign out (!call tconcat (!index self "out"))))(!if (!eq (!index (!index self "t") "token") "[")
(!do
(!line 797)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) "(!index ")
(!line 798)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) out)
(!line 799)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) " ")
(!line 800)(!callmeth self yindex )
(!line 801)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ")")
(!line 802)(!assign out (!call tconcat (!index self "out"))))(!if (!eq (!index (!index self "t") "token") ":")
(!do
(!line 804)(!callmeth self next )
(!line 805)(!if one
(!do
(!line 806)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) "(!callmeth1 "))(!do
(!line 808)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) "(!callmeth ")))
(!line 810)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) out)
(!line 811)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) " ")
(!line 812)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) (!callmeth self str_checkname ))
(!line 813)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) " ")
(!line 814)(!callmeth self funcargs line)
(!line 815)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ")")
(!line 816)(!assign out (!call tconcat (!index self "out"))))(!if (!or (!or (!eq (!index (!index self "t") "token") "(") (!eq (!index (!index self "t") "token") "{")) (!eq (!index (!index self "t") "token") "<string>"))
(!do
(!line 820)(!if one
(!do
(!line 821)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) "(!call1 "))(!do
(!line 823)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) "(!call ")))
(!line 825)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) out)
(!line 826)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) " ")
(!line 827)(!callmeth self funcargs line)
(!line 828)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ")")
(!line 829)(!assign out (!call tconcat (!index self "out"))))(!do
(!line 831)(!assign (!index self "out") sav)
(!line 832)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) out)
(!line 833)(!return )))))))))

(!line 838)(!assign (!index P "simpleexpr")(!lambda (self one)
(!line 841)(!if (!eq (!index (!index self "t") "token") "<number>")
(!do
(!line 842)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) (!index (!index self "t") "seminfo")))(!if (!eq (!index (!index self "t") "token") "<string>")
(!do
(!line 844)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) (!call quote (!index (!index self "t") "seminfo"))))(!if (!eq (!index (!index self "t") "token") "nil")
(!do
(!line 846)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) "!nil"))(!if (!eq (!index (!index self "t") "token") "true")
(!do
(!line 848)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) "!true"))(!if (!eq (!index (!index self "t") "token") "false")
(!do
(!line 850)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) "!false"))(!if (!eq (!index (!index self "t") "token") "...")
(!do
(!line 852)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) "!vararg"))(!if (!eq (!index (!index self "t") "token") "{")
(!do
(!line 854)(!callmeth self constructor )
(!line 855)(!return ))(!if (!eq (!index (!index self "t") "token") "function")
(!do
(!line 857)(!callmeth self next )
(!line 858)(!callmeth self body !false (!index self "linenumber"))
(!line 859)(!return ))(!do
(!line 861)(!callmeth self suffixedexp one)
(!line 862)(!return ))))))))))
(!line 864)(!callmeth self next )))

(!line 867)(!define unop ("not": "(!not " "-": "(!neg " "~": "(!call1 (!index tvm \"bnot\")" "#": "(!len " ))
(!line 873)(!define binop ("+": "(!add " "-": "(!sub " "*": "(!mul " "%": "(!mod " "^": "(!pow " "/": "(!div " "//": "(!call1 (!index tvm \"idiv\")" "&": "(!call1 (!index tvm \"band\")" "|": "(!call1 (!index tvm \"bor\")" "~": "(!call1 (!index tvm \"bxor\")" "<<": "(!call1 (!index tvm \"lshift\")" ">>": "(!call1 (!index tvm \"rshift\")" "..": "(!concat " "~=": "(!ne " "==": "(!eq " "<": "(!lt " "<=": "(!le " ">": "(!gt " ">=": "(!ge " "and": "(!and " "or": "(!or " ))
(!line 896)(!define priority ("+": (10 10) "-": (10 10) "*": (11 11) "%": (11 11) "^": (14 13) "/": (11 11) "//": (11 11) "&": (6 6) "|": (4 4) "~": (5 5) "<<": (7 7) ">>": (7 7) "..": (9 8) "==": (3 3) "<": (3 3) "<=": (3 3) "~=": (3 3) ">": (3 3) ">=": (3 3) "and": (2 2) "or": (1 1) ))
(!line 921)(!assign (!index P "expr")(!lambda (self one limit)
(!line 923)(!assign limit (!or limit 0))
(!line 924)(!define sav (!index self "out"))
(!line 925)(!assign (!index self "out") ())
(!line 926)(!define uop (!index unop (!index (!index self "t") "token")))
(!line 927)(!if uop
(!do
(!line 928)(!callmeth self next )
(!line 929)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) uop)
(!line 930)(!callmeth self expr !false 12)
(!line 931)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ")"))(!do
(!line 933)(!assign pos (!callmeth self simpleexpr one))))
(!line 935)(!define out (!call tconcat (!index self "out")))
(!line 936)(!define op (!index binop (!index (!index self "t") "token")))
(!line 937)(!define prior (!index priority (!index (!index self "t") "token")))
(!line 938)(!while (!and op (!gt (!index prior 1) limit))

(!line 939)(!callmeth self next )
(!line 940)(!assign (!index self "out") (op out " "))
(!line 941)(!callmeth self expr !false (!index prior 2))
(!line 942)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ")")
(!line 943)(!assign out (!call tconcat (!index self "out")))
(!line 944)(!assign op (!index binop (!index (!index self "t") "token")))
(!line 945)(!assign prior (!index priority (!index (!index self "t") "token"))))
(!line 947)(!assign (!index self "out") sav)
(!line 948)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) out)))

(!line 951)(!assign (!index P "block")(!lambda (self)
(!line 953)(!callmeth self statlist )
(!line 954)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ")")))

(!line 957)(!assign (!index P "assignment")(!lambda (self n line)
(!line 958)(!if (!callmeth1 self testnext ",")
(!do
(!line 960)(!if (!eq n 1)
(!do
(!line 961)(!define var (!index (!index self "out") (!len (!index self "out"))))
(!line 962)(!assign (!index (!index self "out") (!len (!index self "out"))) "(!line ")
(!line 963)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) line)
(!line 964)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ")(!massign (")
(!line 965)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) var)))
(!line 967)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) " ")
(!line 968)(!callmeth self suffixedexp )
(!line 969)(!callmeth self assignment (!add n 1)))(!do
(!line 972)(!callmeth self checknext "=")
(!line 973)(!if (!eq n 1)
(!do
(!line 974)(!define var (!index (!index self "out") (!len (!index self "out"))))
(!line 975)(!assign (!index (!index self "out") (!len (!index self "out"))) "(!line ")
(!line 976)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) line)
(!line 977)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ")(!assign ")
(!line 978)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) var)
(!line 979)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) " "))(!do
(!line 981)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ") (")))
(!line 983)(!callmeth self explist )
(!line 984)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ")")
(!line 985)(!if (!ne n 1)
(!do
(!line 986)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ")")))))))

(!line 991)(!assign (!index P "breakstat")(!lambda (self line)
(!line 992)(!callmeth self next )
(!line 993)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) "(!line ")
(!line 994)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) line)
(!line 995)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ")(!break)")))

(!line 998)(!assign (!index P "gotostat")(!lambda (self line)
(!line 999)(!callmeth self next )
(!line 1000)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) "(!line ")
(!line 1001)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) line)
(!line 1002)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ")(!goto ")
(!line 1003)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) (!callmeth self str_checkname ))
(!line 1004)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ")")))

(!line 1007)(!assign (!index P "labelstat")(!lambda (self name line)
(!line 1009)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) "(!line ")
(!line 1010)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) line)
(!line 1011)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ")(!label ")
(!line 1012)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) name)
(!line 1013)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ")")
(!line 1014)(!callmeth self checknext "::")))

(!line 1017)(!assign (!index P "whilestat")(!lambda (self line)
(!line 1019)(!callmeth self next )
(!line 1020)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) "(!line ")
(!line 1021)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) line)
(!line 1022)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ")(!while ")
(!line 1023)(!callmeth self expr !true)
(!line 1024)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) "\x0A")
(!line 1025)(!callmeth self checknext "do")
(!line 1026)(!callmeth self block )
(!line 1027)(!callmeth self check_match "end" "while" line)))

(!line 1030)(!assign (!index P "repeatstat")(!lambda (self line)
(!line 1032)(!callmeth self next )
(!line 1033)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) "(!line ")
(!line 1034)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) line)
(!line 1035)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ")(!repeat")
(!line 1036)(!callmeth self statlist )
(!line 1037)(!callmeth self check_match "until" "repeat" line)
(!line 1038)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) "\x0A")
(!line 1039)(!callmeth self expr !true)
(!line 1040)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ")")))

(!line 1043)(!assign (!index P "forbody")(!lambda (self name)
(!line 1045)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) "\x0A")
(!line 1046)(!callmeth self checknext "do")
(!line 1047)(!if name
(!do
(!line 1048)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) "(!define ")
(!line 1049)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) name)
(!line 1050)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) " ")
(!line 1051)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) name)
(!line 1052)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ")")))
(!line 1054)(!callmeth self block )))

(!line 1057)(!assign (!index P "fornum")(!lambda (self name line)
(!line 1059)(!callmeth self checknext "=")
(!line 1060)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) "(!line ")
(!line 1061)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) line)
(!line 1062)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ")(!loop ")
(!line 1063)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) name)
(!line 1064)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) " ")
(!line 1066)(!callmeth self expr !true)
(!line 1067)(!callmeth self checknext ",")
(!line 1068)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) " ")
(!line 1069)(!callmeth self expr !true)
(!line 1070)(!if (!callmeth1 self testnext ",")
(!do
(!line 1071)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) " ")
(!line 1072)(!callmeth self expr !true))(!do
(!line 1074)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) " 1")))
(!line 1076)(!callmeth self forbody name)))

(!line 1079)(!assign (!index P "forlist")(!lambda (self name line)
(!line 1081)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) "(!line ")
(!line 1082)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) line)
(!line 1083)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ")(!for (")
(!line 1084)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) name)
(!line 1085)(!while (!callmeth1 self testnext ",")

(!line 1086)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) " ")
(!line 1087)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) (!callmeth self str_checkname )))
(!line 1089)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ") (")
(!line 1090)(!callmeth self checknext "in")
(!line 1091)(!assign line (!index self "linenumber"))
(!line 1092)(!callmeth self explist )
(!line 1093)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ")")
(!line 1094)(!callmeth self forbody )))

(!line 1097)(!assign (!index P "forstat")(!lambda (self line)
(!line 1099)(!callmeth self next )
(!line 1100)(!define name (!callmeth self str_checkname ))
(!line 1101)(!if (!eq (!index (!index self "t") "token") "=")
(!do
(!line 1102)(!callmeth self fornum name line))(!if (!or (!eq (!index (!index self "t") "token") ",") (!eq (!index (!index self "t") "token") "in"))
(!do
(!line 1105)(!callmeth self forlist name line))(!do
(!line 1107)(!callmeth self syntaxerror "'=' or 'in' expected"))))
(!line 1109)(!callmeth self check_match "end" "for" line)))

(!line 1112)(!assign (!index P "test_then_block")(!lambda (self)
(!line 1114)(!callmeth self next )
(!line 1115)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) "(!if ")
(!line 1116)(!callmeth self expr !true)
(!line 1117)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) "\x0A")
(!line 1118)(!callmeth self checknext "then")
(!line 1119)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) "(!do")
(!line 1120)(!callmeth self block )))

(!line 1123)(!assign (!index P "ifstat")(!lambda (self line)
(!line 1125)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) "(!line ")
(!line 1126)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) line)
(!line 1127)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ")")
(!line 1128)(!callmeth self test_then_block )
(!line 1129)(!define n 1)
(!line 1130)(!while (!eq (!index (!index self "t") "token") "elseif")

(!line 1131)(!callmeth self test_then_block )
(!line 1132)(!assign n (!add n 1)))
(!line 1134)(!if (!callmeth1 self testnext "else")
(!do
(!line 1135)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) "(!do")
(!line 1136)(!callmeth self block )))
(!line 1138)(!callmeth self check_match "end" "if" line)
(!line 1139)(!loop i 1 n 1
(!define i i)
(!line 1140)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ")"))))

(!line 1144)(!assign (!index P "localfunc")(!lambda (self line)
(!line 1145)(!define name (!callmeth self str_checkname ))
(!line 1146)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) "(!line ")
(!line 1147)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) line)
(!line 1148)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ")(!define ")
(!line 1149)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) name)
(!line 1150)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ")(!assign ")
(!line 1151)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) name)
(!line 1152)(!callmeth self body !false (!index self "linenumber"))
(!line 1153)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ")\x0A")))

(!line 1156)(!assign (!index P "localstat")(!lambda (self line)
(!line 1158)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) "(!line ")
(!line 1159)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) line)
(!line 1160)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ")(!define ")
(!line 1161)(!define multi !false)
(!line 1162)(!repeat
(!line 1163)(!define name (!callmeth self str_checkname ))
(!line 1164)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) name)
(!line 1165)(!if (!eq (!index (!index self "t") "token") ",")
(!do
(!line 1166)(!if (!not multi)
(!do
(!line 1167)(!assign multi !true)
(!line 1168)(!assign (!index (!index self "out") (!len (!index self "out"))) "(")
(!line 1169)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) name)))
(!line 1171)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) " ")))
(!not (!callmeth self testnext ",")))
(!line 1174)(!if multi
(!do
(!line 1175)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ")")))
(!line 1177)(!if (!callmeth1 self testnext "=")
(!do
(!line 1178)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) " ")
(!line 1179)(!if multi
(!do
(!line 1180)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) "(")))
(!line 1182)(!callmeth self explist )
(!line 1183)(!if multi
(!do
(!line 1184)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ")")))))
(!line 1187)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ")")))

(!line 1190)(!assign (!index P "funcname")(!lambda (self)
(!line 1192)(!define ismethod !false)
(!line 1193)(!define name (!callmeth self str_checkname ))
(!line 1194)(!while (!eq (!index (!index self "t") "token") ".")

(!line 1195)(!define sav (!index self "out"))
(!line 1196)(!assign (!index self "out") ("(!index " name " "))
(!line 1197)(!callmeth self fieldsel )
(!line 1198)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ")")
(!line 1199)(!assign name (!call tconcat (!index self "out")))
(!line 1200)(!assign (!index self "out") sav))
(!line 1202)(!if (!eq (!index (!index self "t") "token") ":")
(!do
(!line 1203)(!assign ismethod !true)
(!line 1204)(!define sav (!index self "out"))
(!line 1205)(!assign (!index self "out") ("(!index " name " "))
(!line 1206)(!callmeth self fieldsel )
(!line 1207)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ")")
(!line 1208)(!assign name (!call tconcat (!index self "out")))
(!line 1209)(!assign (!index self "out") sav)))
(!line 1211)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) name)
(!line 1212)(!return ismethod)))

(!line 1215)(!assign (!index P "funcstat")(!lambda (self line)
(!line 1217)(!callmeth self next )
(!line 1218)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) "(!line ")
(!line 1219)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) line)
(!line 1220)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ")(!assign ")
(!line 1221)(!define ismethod (!callmeth self funcname ))
(!line 1222)(!callmeth self body ismethod line)
(!line 1223)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ")\x0A")))

(!line 1226)(!assign (!index P "exprstat")(!lambda (self line)
(!line 1228)(!define sav (!index self "out"))
(!line 1229)(!assign (!index self "out") ())
(!line 1230)(!callmeth self suffixedexp )
(!line 1231)(!define out (!call tconcat (!index self "out")))
(!line 1232)(!assign (!index self "out") sav)
(!line 1233)(!if (!or (!eq (!index (!index self "t") "token") "=") (!eq (!index (!index self "t") "token") ","))
(!do
(!line 1234)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) out)
(!line 1235)(!callmeth self assignment 1 line))(!do
(!line 1237)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) "(!line ")
(!line 1238)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) line)
(!line 1239)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ")")
(!line 1240)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) out)))))

(!line 1244)(!assign (!index P "retstat")(!lambda (self line)
(!line 1246)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) "(!line ")
(!line 1247)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) line)
(!line 1248)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ")(!return ")
(!line 1249)(!if (!and (!not (!callmeth self block_follow !true)) (!ne (!index (!index self "t") "token") ";"))
(!do
(!line 1250)(!callmeth self explist )))
(!line 1252)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ")")
(!line 1253)(!callmeth self testnext ";")))

(!line 1256)(!assign (!index P "statement")(!lambda (self)
(!line 1257)(!define line (!index self "linenumber"))
(!line 1258)(!if (!eq (!index (!index self "t") "token") ";")
(!do
(!line 1260)(!callmeth self next ))(!if (!eq (!index (!index self "t") "token") "if")
(!do
(!line 1263)(!callmeth self ifstat line))(!if (!eq (!index (!index self "t") "token") "while")
(!do
(!line 1266)(!callmeth self whilestat line))(!if (!eq (!index (!index self "t") "token") "do")
(!do
(!line 1269)(!callmeth self next )
(!line 1270)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) "(!line ")
(!line 1271)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) line)
(!line 1272)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ")(!do")
(!line 1273)(!callmeth self block )
(!line 1274)(!callmeth self check_match "end" "do" line))(!if (!eq (!index (!index self "t") "token") "for")
(!do
(!line 1277)(!callmeth self forstat line))(!if (!eq (!index (!index self "t") "token") "repeat")
(!do
(!line 1280)(!callmeth self repeatstat line))(!if (!eq (!index (!index self "t") "token") "function")
(!do
(!line 1283)(!callmeth self funcstat line))(!if (!eq (!index (!index self "t") "token") "local")
(!do
(!line 1286)(!callmeth self next )
(!line 1287)(!if (!callmeth1 self testnext "function")
(!do
(!line 1288)(!callmeth self localfunc line))(!do
(!line 1290)(!callmeth self localstat line))))(!if (!eq (!index (!index self "t") "token") "::")
(!do
(!line 1294)(!callmeth self next )
(!line 1295)(!callmeth self labelstat (!callmeth self str_checkname ) line))(!if (!eq (!index (!index self "t") "token") "return")
(!do
(!line 1298)(!callmeth self next )
(!line 1299)(!callmeth self retstat line))(!if (!eq (!index (!index self "t") "token") "break")
(!do
(!line 1302)(!callmeth self breakstat line))(!if (!eq (!index (!index self "t") "token") "goto")
(!do
(!line 1305)(!callmeth self gotostat line))(!do
(!line 1308)(!callmeth self exprstat line))))))))))))))))

(!line 1312)(!assign (!index P "mainfunc")(!lambda (self)
(!line 1313)(!callmeth self next )
(!line 1314)(!callmeth self statlist )
(!line 1315)(!callmeth self check "<eof>")))

(!line 1318)(!define translate)(!assign translate(!lambda (s fname)
(!line 1319)(!define p (!call setmetatable () ("__index": P)))
(!line 1320)(!callmeth p setinput s fname)
(!line 1321)(!if (!eq (!index p "current") "\x1B")
(!do
(!line 1322)(!return s)))
(!line 1324)(!callmeth p shebang )
(!line 1325)(!assign (!index p "out") ("(!line " (!call quote fname) " " (!index p "linenumber") ")"))
(!line 1326)(!callmeth p mainfunc )
(!line 1327)(!assign (!index (!index p "out") (!add (!len (!index p "out")) 1)) "\x0A; end of generation")
(!line 1328)(!return (!call tconcat (!index p "out")))))

(!line 1331)(!assign (!index _G "_COMPILER") translate)
(!line 1333)(!define arg arg)
(!line 1334)(!define fname (!and arg (!index arg 1)))
(!line 1335)(!if (!and (!not (!call (!index debug "getinfo") 3)) fname)
(!do
(!line 1336)(!define (f msg) ((!call (!index (!index _G "io") "open") fname "r")))
(!line 1337)(!if (!not f)
(!do
(!line 1338)(!call error msg)))
(!line 1340)(!define s (!callmeth f read "*a"))
(!line 1341)(!callmeth f close )
(!line 1342)(!define code (!call translate s (!concat "@" fname)))
(!line 1343)(!call print "; bootstrap")
(!line 1344)(!call print code)))
; end of generation
