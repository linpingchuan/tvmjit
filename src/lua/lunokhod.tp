; bootstrap
(!line "@lua/lunokhod.lua" 1)
(!line 8)(!define _G _G)
(!line 9)(!define assert assert)
(!line 10)(!define char (!index string "char"))
(!line 11)(!define error error)
(!line 12)(!define _find (!index string "find"))
(!line 13)(!define format (!index string "format"))
(!line 14)(!define quote (!index tvm "quote"))
(!line 15)(!define setmetatable setmetatable)
(!line 16)(!define sub (!index string "sub"))
(!line 17)(!define tconcat (!index table "concat"))
(!line 18)(!define tonumber tonumber)
(!line 20)(!define find)(!assign find (!lambda (s patt)
(!line 21)(!return (!call _find s patt 1 !true))))

(!line 24)(!define digit "0123456789")
(!line 25)(!define xdigit (!concat "ABCDEF" (!concat "abcdef" digit)))
(!line 27)(!define alpha (!concat "ABCDEFGHIJKLMNOPQRSTUVWXYZ" (!concat "abcdefghijklmnopqrstuvwxyz" "_")))
(!line 29)(!define alnum (!concat alpha digit))
(!line 30)(!define newline "\x0A\x0D")
(!line 31)(!define space " \x0C\x09\x0B\x0A\x0D")
(!line 33)(!define tokens ("and": !true "break": !true "do": !true "else": !true "elseif": !true "end": !true "false": !true "for": !true "function": !true "goto": !true "if": !true "in": !true "local": !true "nil": !true "not": !true "or": !true "repeat": !true "return": !true "then": !true "true": !true "until": !true "while": !true ))
(!line 58)(!define L ())
(!line 60)(!assign (!index L "_resetbuffer") (!lambda (self)
(!line 61)(!assign (!index self "buff") ())))

(!line 64)(!assign (!index L "_next") (!lambda (self)
(!line 65)(!assign (!index self "pos") (!add (!index self "pos") 1))
(!line 66)(!define c (!call sub (!index self "z") (!index self "pos") (!index self "pos")))
(!line 67)(!assign (!index self "current") (!or (!and (!ne c "") c) "<eof>"))
(!line 68)(!return (!index self "current"))))

(!line 71)(!assign (!index L "_save_and_next") (!lambda (self)
(!line 72)(!callmeth self _save (!index self "current"))
(!line 73)(!callmeth self _next )))

(!line 76)(!assign (!index L "_save") (!lambda (self c)
(!line 77)(!assign (!index (!index self "buff") (!add (!len (!index self "buff")) 1)) c)))

(!line 80)(!assign (!index L "_txtToken") (!lambda (self token)
(!line 81)(!if (!or (!or (!eq token "<name>") (!eq token "<string>")) (!eq token "<number>"))
(!do
(!line 84)(!return (!call tconcat (!index self "buff"))))(!do
(!line 86)(!return token)))))

(!line 90)(!define chunkid)(!assign chunkid (!lambda (source max)
(!line 91)(!define first (!call sub source 1 1))
(!line 92)(!if (!eq first "=")
(!do
(!line 93)(!return (!call sub source 2 (!add 1 max))))(!if (!eq first "@")
(!do
(!line 95)(!if (!le (!len source) max)
(!do
(!line 96)(!return (!call sub source 2)))(!do
(!line 98)(!return (!concat "..." (!call sub source (!neg max)))))))(!do
(!line 101)(!assign source (!call sub source 1 (!sub (!or (!call1 find source "\x0A") (!len source)) 1)))
(!line 102)(!assign source (!or (!and (!lt (!len source) (!sub max 11)) source) (!concat (!call sub source 1 (!sub max 14)) "...")))
(!line 103)(!return (!concat "[string \"" (!concat source "\"]"))))))))

(!line 107)(!assign (!index L "_lexerror") (!lambda (self msg token)
(!line 108)(!assign msg (!call format "%s:%d: %s" (!call chunkid (!index self "source") 60) (!index self "linenumber") msg))
(!line 109)(!if token
(!do
(!line 110)(!assign msg (!call format "%s near %s" msg (!callmeth self _txtToken token)))))
(!line 112)(!call error msg)))

(!line 115)(!assign (!index L "syntaxerror") (!lambda (self msg)
(!line 116)(!callmeth self _lexerror msg (!index (!index self "t") "token"))))

(!line 119)(!assign (!index L "_inclinenumber") (!lambda (self)
(!line 120)(!define old (!index self "current"))
(!line 121)(!call assert (!call find newline (!index self "current")))
(!line 122)(!callmeth self _next )
(!line 123)(!if (!and (!call1 find newline (!index self "current")) (!ne (!index self "current") old))
(!do
(!line 124)(!callmeth self _next )))
(!line 126)(!assign (!index self "linenumber") (!add (!index self "linenumber") 1))))

(!line 129)(!assign (!index L "setinput") (!lambda (self z source)
(!line 130)(!assign (!index self "_lookahead") ("token": !false "seminfo": !false))
(!line 131)(!assign (!index self "z") z)
(!line 132)(!assign (!index self "linenumber") 1)
(!line 133)(!assign (!index self "lastline") 1)
(!line 134)(!assign (!index self "source") source)
(!line 135)(!assign (!index self "buff") ())
(!line 136)(!assign (!index self "pos") 0)
(!line 137)(!assign (!index self "t") ("token": (!callmeth1 self _next ) "seminfo": !false))))

(!line 146)(!assign (!index L "_check_next") (!lambda (self set)
(!line 147)(!if (!not (!call find set (!index self "current")))
(!do
(!line 148)(!return !false)))
(!line 150)(!callmeth self _save_and_next )
(!line 151)(!return !true)))

(!line 154)(!assign (!index L "_read_numeral") (!lambda (self tok)
(!line 155)(!define expo "Ee")
(!line 156)(!define first (!index self "current"))
(!line 157)(!call assert (!call find digit (!index self "current")))
(!line 158)(!callmeth self _save_and_next )
(!line 159)(!if (!and (!eq first "0") (!callmeth self _check_next "Xx"))
(!do
(!line 160)(!assign expo "Pp")))
(!line 162)(!while !true

(!line 163)(!if (!callmeth1 self _check_next expo)
(!do
(!line 164)(!callmeth self _check_next "+-"))(!if (!or (!call1 find xdigit (!index self "current")) (!eq (!index self "current") "."))
(!do
(!line 166)(!callmeth self _save_and_next ))(!do
(!line 168)(!break)))))
(!line 171)(!assign (!index tok "seminfo") (!call tconcat (!index self "buff")))
(!line 172)(!if (!not (!call tonumber (!index tok "seminfo")))
(!do
(!line 173)(!callmeth self _lexerror "malformed number" "<number>")))))

(!line 177)(!assign (!index L "_skip_sep") (!lambda (self)
(!line 178)(!define count 0)
(!line 179)(!define s (!index self "current"))
(!line 180)(!call assert (!or (!eq s "[") (!eq s "]")))
(!line 181)(!callmeth self _save_and_next )
(!line 182)(!while (!eq (!index self "current") "=")

(!line 183)(!callmeth self _save_and_next )
(!line 184)(!assign count (!add count 1)))
(!line 186)(!return (!or (!and (!eq (!index self "current") s) count) (!sub (!neg count) 1)))))

(!line 189)(!assign (!index L "_read_long_string") (!lambda (self tok sep)
(!line 190)(!callmeth self _save_and_next )
(!line 191)(!if (!call1 find newline (!index self "current"))
(!do
(!line 192)(!callmeth self _inclinenumber )))
(!line 194)(!while !true

(!line 195)(!if (!eq (!index self "current") "<eof>")
(!do
(!line 196)(!callmeth self _lexerror (!or (!and tok "unfinished long string") "unfinished long comment") "<eof>"))(!if (!eq (!index self "current") "]")
(!do
(!line 198)(!if (!eq (!callmeth1 self _skip_sep ) sep)
(!do
(!line 199)(!callmeth self _save_and_next )
(!line 200)(!break))))(!if (!or (!eq (!index self "current") "\x0A") (!eq (!index self "current") "\x0D"))
(!do
(!line 203)(!callmeth self _save "\x0A")
(!line 204)(!callmeth self _inclinenumber )
(!line 205)(!if (!not tok)
(!do
(!line 206)(!callmeth self _resetbuffer ))))(!do
(!line 209)(!if tok
(!do
(!line 210)(!callmeth self _save_and_next ))(!do
(!line 212)(!callmeth self _next ))))))))
(!line 216)(!if tok
(!do
(!line 217)(!assign (!index tok "seminfo") (!call sub (!call tconcat (!index self "buff")) (!add 3 sep) (!sub (!neg 3) sep)))))))

(!line 221)(!assign (!index L "_escerror") (!lambda (self c msg)
(!line 222)(!callmeth self _resetbuffer )
(!line 223)(!callmeth self _save c)
(!line 224)(!callmeth self _lexerror msg "<string>")))

(!line 227)(!assign (!index L "_readhexaesc") (!lambda (self)
(!line 228)(!define r "")
(!line 229)(!loop i 1 2 1
(!define i i)
(!line 230)(!define c (!callmeth self _next ))
(!line 231)(!assign r (!concat r c))
(!line 232)(!if (!not (!call find xdigit c))
(!do
(!line 233)(!callmeth self _escerror (!concat "x" r) "hexadecimal digit expected"))))
(!line 236)(!return (!call char (!call tonumber r 16)))))

(!line 239)(!assign (!index L "_readdecesc") (!lambda (self)
(!line 240)(!define r "")
(!line 241)(!loop i 1 3 1
(!define i i)
(!line 242)(!define c (!index self "current"))
(!line 243)(!if (!not (!call find digit c))
(!do
(!line 244)(!break)))
(!line 246)(!assign r (!concat r c))
(!line 247)(!callmeth self _next ))
(!line 249)(!assign r (!call tonumber r))
(!line 250)(!if (!gt r 255)
(!do
(!line 251)(!callmeth self _escerror err "decimal escape too large")))
(!line 253)(!return (!call char r))))

(!line 256)(!assign (!index L "_read_string") (!lambda (self del tok)
(!line 257)(!callmeth self _save_and_next )
(!line 258)(!while (!ne (!index self "current") del)

(!line 259)(!if (!eq (!index self "current") "<eof>")
(!do
(!line 260)(!callmeth self _lexerror "unfinished string" "<eof>"))(!if (!or (!eq (!index self "current") "\x0A") (!eq (!index self "current") "\x0D"))
(!do
(!line 263)(!callmeth self _lexerror "unfinished string" "<string>"))(!if (!eq (!index self "current") "\\")
(!do
(!line 265)(!callmeth self _next )
(!line 266)(!if (!eq (!index self "current") "a")
(!do
(!line 267)(!callmeth self _next )
(!line 268)(!callmeth self _save "\x07"))(!if (!eq (!index self "current") "b")
(!do
(!line 270)(!callmeth self _next )
(!line 271)(!callmeth self _save "\x08"))(!if (!eq (!index self "current") "f")
(!do
(!line 273)(!callmeth self _next )
(!line 274)(!callmeth self _save "\x0C"))(!if (!eq (!index self "current") "n")
(!do
(!line 276)(!callmeth self _next )
(!line 277)(!callmeth self _save "\x0A"))(!if (!eq (!index self "current") "r")
(!do
(!line 279)(!callmeth self _next )
(!line 280)(!callmeth self _save "\x0D"))(!if (!eq (!index self "current") "t")
(!do
(!line 282)(!callmeth self _next )
(!line 283)(!callmeth self _save "\x09"))(!if (!eq (!index self "current") "v")
(!do
(!line 285)(!callmeth self _next )
(!line 286)(!callmeth self _save "\x0B"))(!if (!eq (!index self "current") "x")
(!do
(!line 288)(!define c (!callmeth self _readhexaesc ))
(!line 289)(!callmeth self _next )
(!line 290)(!callmeth self _save c))(!if (!or (!eq (!index self "current") "\x0A") (!eq (!index self "current") "\x0D"))
(!do
(!line 293)(!callmeth self _inclinenumber )
(!line 294)(!callmeth self _save "\x0A"))(!if (!eq (!index self "current") "\\")
(!do
(!line 296)(!callmeth self _next )
(!line 297)(!callmeth self _save "\\"))(!if (!eq (!index self "current") "\"")
(!do
(!line 299)(!callmeth self _next )
(!line 300)(!callmeth self _save "\""))(!if (!eq (!index self "current") "'")
(!do
(!line 302)(!callmeth self _next )
(!line 303)(!callmeth self _save "'"))(!if (!eq (!index self "current") "<eof>")
(!do)(!if (!eq (!index self "current") "z")
(!do
(!line 307)(!callmeth self _next )
(!line 308)(!while (!call1 find space (!index self "current"))

(!line 309)(!if (!call1 find newline (!index self "current"))
(!do
(!line 310)(!callmeth self _inclinenumber ))(!do
(!line 312)(!callmeth self _next )))))(!do
(!line 316)(!if (!not (!call find digit (!index self "current")))
(!do
(!line 317)(!callmeth self _escerror (!index self "current") "invalid escape sequence")))
(!line 319)(!callmeth self _save (!callmeth self _readdecesc ))))))))))))))))))(!do
(!line 322)(!callmeth self _save_and_next ))))))
(!line 325)(!callmeth self _save_and_next )
(!line 326)(!assign (!index tok "seminfo") (!call sub (!call tconcat (!index self "buff")) 2 (!neg 2)))))

(!line 329)(!assign (!index L "_llex") (!lambda (self tok)
(!line 330)(!callmeth self _resetbuffer )
(!line 331)(!while !true

(!line 332)(!if (!or (!eq (!index self "current") "\x0A") (!eq (!index self "current") "\x0D"))
(!do
(!line 334)(!callmeth self _inclinenumber ))(!if (!or (!or (!or (!eq (!index self "current") " ") (!eq (!index self "current") "\x0C")) (!eq (!index self "current") "\x09")) (!eq (!index self "current") "\x0B"))
(!do
(!line 339)(!callmeth self _next ))(!if (!eq (!index self "current") "-")
(!do
(!line 341)(!callmeth self _next )
(!line 342)(!if (!ne (!index self "current") "-")
(!do
(!line 343)(!return "-")))
(!line 345)(!callmeth self _next )
(!line 346)(!if (!eq (!index self "current") "[")
(!do
(!line 347)(!define sep (!callmeth self _skip_sep ))
(!line 348)(!callmeth self _resetbuffer )
(!line 349)(!if (!ge sep 0)
(!do
(!line 350)(!callmeth self _read_long_string !nil sep)
(!line 351)(!callmeth self _resetbuffer ))))(!do
(!line 354)(!while (!and (!not (!call find newline (!index self "current"))) (!ne (!index self "current") "<eof>"))

(!line 355)(!callmeth self _next )))))(!if (!eq (!index self "current") "[")
(!do
(!line 359)(!define sep (!callmeth self _skip_sep ))
(!line 360)(!if (!ge sep 0)
(!do
(!line 361)(!callmeth self _read_long_string tok sep)
(!line 362)(!return "<string>"))(!if (!eq sep (!neg 1))
(!do
(!line 364)(!return "["))(!do
(!line 366)(!callmeth self _lexerror "invalid long string delimiter" "<string>")))))(!if (!eq (!index self "current") "=")
(!do
(!line 369)(!callmeth self _next )
(!line 370)(!if (!ne (!index self "current") "=")
(!do
(!line 371)(!return "="))(!do
(!line 373)(!callmeth self _next )
(!line 374)(!return "=="))))(!if (!eq (!index self "current") "<")
(!do
(!line 377)(!callmeth self _next )
(!line 378)(!if (!ne (!index self "current") "=")
(!do
(!line 379)(!return "<"))(!do
(!line 381)(!callmeth self _next )
(!line 382)(!return "<="))))(!if (!eq (!index self "current") ">")
(!do
(!line 385)(!callmeth self _next )
(!line 386)(!if (!ne (!index self "current") "=")
(!do
(!line 387)(!return ">"))(!do
(!line 389)(!callmeth self _next )
(!line 390)(!return ">="))))(!if (!eq (!index self "current") "~")
(!do
(!line 393)(!callmeth self _next )
(!line 394)(!if (!ne (!index self "current") "=")
(!do
(!line 395)(!return "~"))(!do
(!line 397)(!callmeth self _next )
(!line 398)(!return "~="))))(!if (!eq (!index self "current") ":")
(!do
(!line 401)(!callmeth self _next )
(!line 402)(!if (!ne (!index self "current") ":")
(!do
(!line 403)(!return ":"))(!do
(!line 405)(!callmeth self _next )
(!line 406)(!return "::"))))(!if (!or (!eq (!index self "current") "\"") (!eq (!index self "current") "'"))
(!do
(!line 410)(!callmeth self _read_string (!index self "current") tok)
(!line 411)(!return "<string>"))(!if (!eq (!index self "current") ".")
(!do
(!line 413)(!callmeth self _save_and_next )
(!line 414)(!if (!callmeth1 self _check_next ".")
(!do
(!line 415)(!if (!callmeth1 self _check_next ".")
(!do
(!line 416)(!return "..."))(!do
(!line 418)(!return "..")))))
(!line 421)(!if (!not (!call find digit (!index self "current")))
(!do
(!line 422)(!return "."))(!do
(!line 424)(!callmeth self _read_numeral tok)
(!line 425)(!return "<number>"))))(!if (!eq (!index self "current") "<eof>")
(!do
(!line 428)(!return "<eof>"))(!if (!call1 find digit (!index self "current"))
(!do
(!line 430)(!callmeth self _read_numeral tok)
(!line 431)(!return "<number>"))(!do
(!line 433)(!if (!call1 find alpha (!index self "current"))
(!do
(!line 434)(!repeat
(!line 435)(!callmeth self _save_and_next )
(!not (!call find alnum (!index self "current"))))
(!line 437)(!assign (!index tok "seminfo") (!call tconcat (!index self "buff")))
(!line 438)(!if (!index tokens (!index tok "seminfo"))
(!do
(!line 439)(!return (!index tok "seminfo")))(!do
(!line 441)(!return "<name>"))))(!do
(!line 444)(!define c (!index self "current"))
(!line 445)(!callmeth self _next )
(!line 446)(!return c))))))))))))))))))))

(!line 452)(!assign (!index L "next") (!lambda (self)
(!line 453)(!assign (!index self "lastline") (!index self "linenumber"))
(!line 454)(!if (!index (!index self "_lookahead") "token")
(!do
(!line 455)(!assign (!index (!index self "t") "token") (!index (!index self "_lookahead") "token"))
(!line 456)(!assign (!index (!index self "t") "seminfo") (!index (!index self "_lookahead") "seminfo"))
(!line 457)(!assign (!index (!index self "_lookahead") "token") !false))(!do
(!line 459)(!assign (!index (!index self "t") "token") (!callmeth self _llex (!index self "t")))))))

(!line 463)(!assign (!index L "lookahead") (!lambda (self)
(!line 464)(!call assert (!not (!index (!index self "_lookahead") "token")))
(!line 465)(!assign (!index (!index self "_lookahead") "token") (!callmeth self _llex (!index self "_lookahead")))
(!line 466)(!return (!index (!index self "_lookahead") "token"))))

(!line 469)(!assign (!index L "BOM") (!lambda (self)
(!line 471)(!if (!eq (!index self "current") (!call char 0xEF))
(!do
(!line 472)(!callmeth self _next )
(!line 473)(!if (!eq (!index self "current") (!call char 0xBB))
(!do
(!line 474)(!callmeth self _next )
(!line 475)(!if (!eq (!index self "current") (!call char 0xBF))
(!do
(!line 476)(!callmeth self _next )))))))))

(!line 482)(!assign (!index L "shebang") (!lambda (self)
(!line 483)(!callmeth self BOM )
(!line 484)(!if (!eq (!index self "current") "#")
(!do
(!line 485)(!while (!ne (!index self "current") "\x0A")

(!line 486)(!callmeth self _next ))
(!line 488)(!callmeth self _inclinenumber )))))

(!line 492)(!define P (!call setmetatable () ("__index": L)))
(!line 494)(!assign (!index P "error_expected") (!lambda (self token)
(!line 495)(!callmeth self syntaxerror (!concat token " expected"))))

(!line 498)(!assign (!index P "testnext") (!lambda (self c)
(!line 499)(!if (!eq (!index (!index self "t") "token") c)
(!do
(!line 500)(!callmeth self next )
(!line 501)(!return !true))(!do
(!line 503)(!return !false)))))

(!line 507)(!assign (!index P "check") (!lambda (self c)
(!line 508)(!if (!ne (!index (!index self "t") "token") c)
(!do
(!line 509)(!callmeth self error_expected c)))))

(!line 513)(!assign (!index P "checknext") (!lambda (self c)
(!line 514)(!callmeth self check c)
(!line 515)(!callmeth self next )))

(!line 518)(!assign (!index P "check_match") (!lambda (self what who where)
(!line 519)(!if (!not (!callmeth self testnext what))
(!do
(!line 520)(!if (!eq where (!index self "linenumber"))
(!do
(!line 521)(!callmeth self error_expected what))(!do
(!line 523)(!callmeth self syntaxerror (!call format "%s expected (to close %s at line %d)" what who where))))))))

(!line 528)(!assign (!index P "str_checkname") (!lambda (self)
(!line 529)(!callmeth self check "<name>")
(!line 530)(!define name (!index (!index self "t") "seminfo"))
(!line 531)(!callmeth self next )
(!line 532)(!return name)))

(!line 541)(!assign (!index P "block_follow") (!lambda (self withuntil)
(!line 542)(!if (!or (!or (!or (!eq (!index (!index self "t") "token") "else") (!eq (!index (!index self "t") "token") "elseif")) (!eq (!index (!index self "t") "token") "end")) (!eq (!index (!index self "t") "token") "<eof>"))
(!do
(!line 546)(!return !true))(!if (!eq (!index (!index self "t") "token") "until")
(!do
(!line 548)(!return withuntil))(!do
(!line 550)(!return !false))))))

(!line 554)(!assign (!index P "statlist") (!lambda (self)
(!line 556)(!while (!not (!callmeth self block_follow !true))

(!line 557)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) "\x0A")
(!line 558)(!if (!eq (!index (!index self "t") "token") "return")
(!do
(!line 559)(!callmeth self statement )
(!line 560)(!return )))
(!line 562)(!callmeth self statement ))))

(!line 566)(!assign (!index P "fieldsel") (!lambda (self)
(!line 568)(!callmeth self next )
(!line 569)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) (!call quote (!callmeth self str_checkname )))))

(!line 572)(!assign (!index P "yindex") (!lambda (self)
(!line 574)(!callmeth self next )
(!line 575)(!callmeth self expr !true)
(!line 576)(!callmeth self checknext "]")))

(!line 579)(!assign (!index P "recfield") (!lambda (self)
(!line 581)(!if (!eq (!index (!index self "t") "token") "<name>")
(!do
(!line 582)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) (!call quote (!callmeth self str_checkname ))))(!do
(!line 584)(!callmeth self yindex )))
(!line 586)(!callmeth self checknext "=")
(!line 587)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ": ")
(!line 588)(!callmeth self expr !true)))

(!line 591)(!assign (!index P "listfield") (!lambda (self list)
(!line 593)(!if (!eq (!len list) 0)
(!do
(!line 594)(!assign (!index list 1) !true)))
(!line 596)(!callmeth self expr )))

(!line 599)(!assign (!index P "field") (!lambda (self list)
(!line 601)(!if (!eq (!index (!index self "t") "token") "<name>")
(!do
(!line 602)(!if (!ne (!callmeth1 self lookahead ) "=")
(!do
(!line 603)(!callmeth self listfield list))(!do
(!line 605)(!callmeth self recfield ))))(!if (!eq (!index (!index self "t") "token") "[")
(!do
(!line 608)(!callmeth self recfield ))(!do
(!line 610)(!callmeth self listfield list))))))

(!line 614)(!assign (!index P "constructor") (!lambda (self)
(!line 616)(!define line (!index self "linenumber"))
(!line 617)(!callmeth self checknext "{")
(!line 618)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) "(")
(!line 619)(!define list ())
(!line 620)(!repeat
(!line 621)(!if (!eq (!index (!index self "t") "token") "}")
(!do
(!line 622)(!break)))
(!line 624)(!callmeth self field list)
(!line 625)(!if (!or (!eq (!index (!index self "t") "token") ",") (!eq (!index (!index self "t") "token") ";"))
(!do
(!line 626)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) " ")))
(!not (!or (!callmeth1 self testnext ",") (!callmeth self testnext ";"))))
(!line 629)(!callmeth self check_match "}" "{" line)
(!line 630)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ")")))

(!line 633)(!assign (!index P "parlist") (!lambda (self ismethod)
(!line 636)(!if ismethod
(!do
(!line 637)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) "self")))
(!line 639)(!if (!ne (!index (!index self "t") "token") ")")
(!do
(!line 640)(!if ismethod
(!do
(!line 641)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) " ")))
(!line 643)(!repeat
(!line 644)(!if (!eq (!index (!index self "t") "token") "<name>")
(!do
(!line 645)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) (!index (!index self "t") "seminfo"))
(!line 646)(!callmeth self next ))(!if (!eq (!index (!index self "t") "token") "...")
(!do
(!line 648)(!callmeth self next )
(!line 649)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) "!vararg")
(!line 650)(!break))(!do
(!line 652)(!callmeth self syntaxerror "<name> or '...' expected"))))
(!line 654)(!if (!eq (!index (!index self "t") "token") ",")
(!do
(!line 655)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) " ")))
(!not (!callmeth self testnext ",")))))))

(!line 661)(!assign (!index P "body") (!lambda (self ismethod line)
(!line 663)(!define line (!index self "linenumber"))
(!line 664)(!callmeth self checknext "(")
(!line 665)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) "(")
(!line 666)(!callmeth self parlist ismethod)
(!line 667)(!callmeth self checknext ")")
(!line 668)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ")")
(!line 669)(!callmeth self statlist )
(!line 670)(!callmeth self check_match "end" "function" line)
(!line 671)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ")")))

(!line 674)(!assign (!index P "explist") (!lambda (self)
(!line 676)(!callmeth self expr )
(!line 677)(!while (!callmeth1 self testnext ",")

(!line 678)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) " ")
(!line 679)(!callmeth self expr ))))

(!line 683)(!assign (!index P "funcargs") (!lambda (self line)
(!line 684)(!if (!eq (!index (!index self "t") "token") "(")
(!do
(!line 686)(!callmeth self next )
(!line 687)(!if (!ne (!index (!index self "t") "token") ")")
(!do
(!line 688)(!callmeth self explist )))
(!line 690)(!callmeth self check_match ")" "(" line))(!if (!eq (!index (!index self "t") "token") "{")
(!do
(!line 693)(!callmeth self constructor ))(!if (!eq (!index (!index self "t") "token") "<string>")
(!do
(!line 696)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) (!call quote (!index (!index self "t") "seminfo")))
(!line 697)(!callmeth self next ))(!do
(!line 699)(!callmeth self syntaxerror "function arguments expected")))))))

(!line 703)(!assign (!index P "primaryexpr") (!lambda (self)
(!line 705)(!if (!eq (!index (!index self "t") "token") "(")
(!do
(!line 706)(!define line (!index self "linenumber"))
(!line 707)(!callmeth self next )
(!line 708)(!callmeth self expr !true)
(!line 709)(!callmeth self check_match ")" "(" line))(!if (!eq (!index (!index self "t") "token") "<name>")
(!do
(!line 711)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) (!callmeth self str_checkname )))(!do
(!line 713)(!callmeth self syntaxerror "unexpected symbol"))))))

(!line 717)(!assign (!index P "suffixedexp") (!lambda (self one)
(!line 720)(!define line (!index self "linenumber"))
(!line 721)(!define sav (!index self "out"))
(!line 722)(!assign (!index self "out") ())
(!line 723)(!callmeth self primaryexpr )
(!line 724)(!define out (!call tconcat (!index self "out")))
(!line 725)(!while !true

(!line 726)(!assign (!index self "out") ())
(!line 727)(!if (!eq (!index (!index self "t") "token") ".")
(!do
(!line 728)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) "(!index ")
(!line 729)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) out)
(!line 730)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) " ")
(!line 731)(!callmeth self fieldsel )
(!line 732)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ")")
(!line 733)(!assign out (!call tconcat (!index self "out"))))(!if (!eq (!index (!index self "t") "token") "[")
(!do
(!line 735)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) "(!index ")
(!line 736)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) out)
(!line 737)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) " ")
(!line 738)(!callmeth self yindex )
(!line 739)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ")")
(!line 740)(!assign out (!call tconcat (!index self "out"))))(!if (!eq (!index (!index self "t") "token") ":")
(!do
(!line 742)(!callmeth self next )
(!line 743)(!if one
(!do
(!line 744)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) "(!callmeth1 "))(!do
(!line 746)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) "(!callmeth ")))
(!line 748)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) out)
(!line 749)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) " ")
(!line 750)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) (!callmeth self str_checkname ))
(!line 751)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) " ")
(!line 752)(!callmeth self funcargs line)
(!line 753)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ")")
(!line 754)(!assign out (!call tconcat (!index self "out"))))(!if (!or (!or (!eq (!index (!index self "t") "token") "(") (!eq (!index (!index self "t") "token") "{")) (!eq (!index (!index self "t") "token") "<string>"))
(!do
(!line 758)(!if one
(!do
(!line 759)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) "(!call1 "))(!do
(!line 761)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) "(!call ")))
(!line 763)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) out)
(!line 764)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) " ")
(!line 765)(!callmeth self funcargs line)
(!line 766)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ")")
(!line 767)(!assign out (!call tconcat (!index self "out"))))(!do
(!line 769)(!assign (!index self "out") sav)
(!line 770)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) out)
(!line 771)(!return )))))))))

(!line 776)(!assign (!index P "simpleexpr") (!lambda (self one)
(!line 779)(!if (!eq (!index (!index self "t") "token") "<number>")
(!do
(!line 780)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) (!index (!index self "t") "seminfo")))(!if (!eq (!index (!index self "t") "token") "<string>")
(!do
(!line 782)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) (!call quote (!index (!index self "t") "seminfo"))))(!if (!eq (!index (!index self "t") "token") "nil")
(!do
(!line 784)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) "!nil"))(!if (!eq (!index (!index self "t") "token") "true")
(!do
(!line 786)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) "!true"))(!if (!eq (!index (!index self "t") "token") "false")
(!do
(!line 788)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) "!false"))(!if (!eq (!index (!index self "t") "token") "...")
(!do
(!line 790)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) "!vararg"))(!if (!eq (!index (!index self "t") "token") "{")
(!do
(!line 792)(!callmeth self constructor )
(!line 793)(!return ))(!if (!eq (!index (!index self "t") "token") "function")
(!do
(!line 795)(!callmeth self next )
(!line 796)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) "(!lambda ")
(!line 797)(!callmeth self body !false (!index self "linenumber"))
(!line 798)(!return ))(!do
(!line 800)(!callmeth self suffixedexp one)
(!line 801)(!return ))))))))))
(!line 803)(!callmeth self next )))

(!line 806)(!define unop ("not": "(!not " "-": "(!neg " "#": "(!len " ))
(!line 811)(!define binop ("+": "(!add " "-": "(!sub " "*": "(!mul " "/": "(!div " "%": "(!mod " "^": "(!pow " "..": "(!concat " "~=": "(!ne " "==": "(!eq " "<=": "(!le " "<": "(!lt " ">=": "(!ge " ">": "(!gt " "and": "(!and " "or": "(!or " ))
(!line 828)(!define priority ("+": (6 6) "-": (6 6) "*": (7 7) "/": (7 7) "%": (7 7) "^": (10 9) "..": (5 4) "~=": (3 3) "==": (3 3) "<=": (3 3) "<": (3 3) ">=": (3 3) ">": (3 3) "and": (2 2) "or": (1 1) ))
(!line 847)(!assign (!index P "expr") (!lambda (self one limit)
(!line 849)(!assign limit (!or limit 0))
(!line 850)(!define sav (!index self "out"))
(!line 851)(!assign (!index self "out") ())
(!line 852)(!define uop (!index unop (!index (!index self "t") "token")))
(!line 853)(!if uop
(!do
(!line 854)(!callmeth self next )
(!line 855)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) uop)
(!line 856)(!callmeth self expr !false 8)
(!line 857)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ")"))(!do
(!line 859)(!assign pos (!callmeth self simpleexpr one))))
(!line 861)(!define out (!call tconcat (!index self "out")))
(!line 862)(!define op (!index binop (!index (!index self "t") "token")))
(!line 863)(!define prior (!index priority (!index (!index self "t") "token")))
(!line 864)(!while (!and op (!gt (!index prior 1) limit))

(!line 865)(!callmeth self next )
(!line 866)(!assign (!index self "out") (op out " "))
(!line 867)(!callmeth self expr !false (!index prior 2))
(!line 868)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ")")
(!line 869)(!assign out (!call tconcat (!index self "out")))
(!line 870)(!assign op (!index binop (!index (!index self "t") "token")))
(!line 871)(!assign prior (!index priority (!index (!index self "t") "token"))))
(!line 873)(!assign (!index self "out") sav)
(!line 874)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) out)))

(!line 877)(!assign (!index P "block") (!lambda (self)
(!line 879)(!callmeth self statlist )
(!line 880)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ")")))

(!line 883)(!assign (!index P "assignment") (!lambda (self n line)
(!line 884)(!if (!callmeth1 self testnext ",")
(!do
(!line 886)(!if (!eq n 1)
(!do
(!line 887)(!define var (!index (!index self "out") (!len (!index self "out"))))
(!line 888)(!assign (!index (!index self "out") (!len (!index self "out"))) "(!line ")
(!line 889)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) line)
(!line 890)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ")(!massign (")
(!line 891)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) var)))
(!line 893)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) " ")
(!line 894)(!callmeth self suffixedexp )
(!line 895)(!callmeth self assignment (!add n 1)))(!do
(!line 898)(!callmeth self checknext "=")
(!line 899)(!if (!eq n 1)
(!do
(!line 900)(!define var (!index (!index self "out") (!len (!index self "out"))))
(!line 901)(!assign (!index (!index self "out") (!len (!index self "out"))) "(!line ")
(!line 902)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) line)
(!line 903)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ")(!assign ")
(!line 904)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) var)
(!line 905)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) " "))(!do
(!line 907)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ") (")))
(!line 909)(!callmeth self explist )
(!line 910)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ")")
(!line 911)(!if (!ne n 1)
(!do
(!line 912)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ")")))))))

(!line 917)(!assign (!index P "breakstat") (!lambda (self line)
(!line 918)(!callmeth self next )
(!line 919)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) "(!line ")
(!line 920)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) line)
(!line 921)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ")(!break)")))

(!line 924)(!assign (!index P "gotostat") (!lambda (self line)
(!line 925)(!callmeth self next )
(!line 926)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) "(!line ")
(!line 927)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) line)
(!line 928)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ")(!goto ")
(!line 929)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) (!callmeth self str_checkname ))
(!line 930)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ")")))

(!line 933)(!assign (!index P "labelstat") (!lambda (self name line)
(!line 935)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) "(!line ")
(!line 936)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) line)
(!line 937)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ")(!label ")
(!line 938)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) name)
(!line 939)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ")")
(!line 940)(!callmeth self checknext "::")))

(!line 943)(!assign (!index P "whilestat") (!lambda (self line)
(!line 945)(!callmeth self next )
(!line 946)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) "(!line ")
(!line 947)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) line)
(!line 948)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ")(!while ")
(!line 949)(!callmeth self expr !true)
(!line 950)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) "\x0A")
(!line 951)(!callmeth self checknext "do")
(!line 952)(!callmeth self block )
(!line 953)(!callmeth self check_match "end" "while" line)))

(!line 956)(!assign (!index P "repeatstat") (!lambda (self line)
(!line 958)(!callmeth self next )
(!line 959)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) "(!line ")
(!line 960)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) line)
(!line 961)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ")(!repeat")
(!line 962)(!callmeth self statlist )
(!line 963)(!callmeth self check_match "until" "repeat" line)
(!line 964)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) "\x0A")
(!line 965)(!callmeth self expr !true)
(!line 966)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ")")))

(!line 969)(!assign (!index P "forbody") (!lambda (self name)
(!line 971)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) "\x0A")
(!line 972)(!callmeth self checknext "do")
(!line 973)(!if name
(!do
(!line 974)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) "(!define ")
(!line 975)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) name)
(!line 976)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) " ")
(!line 977)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) name)
(!line 978)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ")")))
(!line 980)(!callmeth self block )))

(!line 983)(!assign (!index P "fornum") (!lambda (self name line)
(!line 985)(!callmeth self checknext "=")
(!line 986)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) "(!line ")
(!line 987)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) line)
(!line 988)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ")(!loop ")
(!line 989)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) name)
(!line 990)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) " ")
(!line 992)(!callmeth self expr !true)
(!line 993)(!callmeth self checknext ",")
(!line 994)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) " ")
(!line 995)(!callmeth self expr !true)
(!line 996)(!if (!callmeth1 self testnext ",")
(!do
(!line 997)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) " ")
(!line 998)(!callmeth self expr !true))(!do
(!line 1000)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) " 1")))
(!line 1002)(!callmeth self forbody name)))

(!line 1005)(!assign (!index P "forlist") (!lambda (self name line)
(!line 1007)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) "(!line ")
(!line 1008)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) line)
(!line 1009)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ")(!for (")
(!line 1010)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) name)
(!line 1011)(!while (!callmeth1 self testnext ",")

(!line 1012)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) " ")
(!line 1013)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) (!callmeth self str_checkname )))
(!line 1015)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ") (")
(!line 1016)(!callmeth self checknext "in")
(!line 1017)(!assign line (!index self "linenumber"))
(!line 1018)(!callmeth self explist )
(!line 1019)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ")")
(!line 1020)(!callmeth self forbody )))

(!line 1023)(!assign (!index P "forstat") (!lambda (self line)
(!line 1025)(!callmeth self next )
(!line 1026)(!define name (!callmeth self str_checkname ))
(!line 1027)(!if (!eq (!index (!index self "t") "token") "=")
(!do
(!line 1028)(!callmeth self fornum name line))(!if (!or (!eq (!index (!index self "t") "token") ",") (!eq (!index (!index self "t") "token") "in"))
(!do
(!line 1031)(!callmeth self forlist name line))(!do
(!line 1033)(!callmeth self syntaxerror "'=' or 'in' expected"))))
(!line 1035)(!callmeth self check_match "end" "for" line)))

(!line 1038)(!assign (!index P "test_then_block") (!lambda (self)
(!line 1040)(!callmeth self next )
(!line 1041)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) "(!if ")
(!line 1042)(!callmeth self expr !true)
(!line 1043)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) "\x0A")
(!line 1044)(!callmeth self checknext "then")
(!line 1045)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) "(!do")
(!line 1046)(!callmeth self block )))

(!line 1049)(!assign (!index P "ifstat") (!lambda (self line)
(!line 1051)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) "(!line ")
(!line 1052)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) line)
(!line 1053)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ")")
(!line 1054)(!callmeth self test_then_block )
(!line 1055)(!define n 1)
(!line 1056)(!while (!eq (!index (!index self "t") "token") "elseif")

(!line 1057)(!callmeth self test_then_block )
(!line 1058)(!assign n (!add n 1)))
(!line 1060)(!if (!callmeth1 self testnext "else")
(!do
(!line 1061)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) "(!do")
(!line 1062)(!callmeth self block )))
(!line 1064)(!callmeth self check_match "end" "if" line)
(!line 1065)(!loop i 1 n 1
(!define i i)
(!line 1066)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ")"))))

(!line 1070)(!assign (!index P "localfunc") (!lambda (self line)
(!line 1071)(!define name (!callmeth self str_checkname ))
(!line 1072)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) "(!line ")
(!line 1073)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) line)
(!line 1074)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ")(!define ")
(!line 1075)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) name)
(!line 1076)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ")(!assign ")
(!line 1077)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) name)
(!line 1078)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) " (!lambda ")
(!line 1079)(!callmeth self body !false (!index self "linenumber"))
(!line 1080)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ")\x0A")))

(!line 1083)(!assign (!index P "localstat") (!lambda (self line)
(!line 1085)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) "(!line ")
(!line 1086)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) line)
(!line 1087)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ")(!define ")
(!line 1088)(!define multi !false)
(!line 1089)(!repeat
(!line 1090)(!define name (!callmeth self str_checkname ))
(!line 1091)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) name)
(!line 1092)(!if (!eq (!index (!index self "t") "token") ",")
(!do
(!line 1093)(!if (!not multi)
(!do
(!line 1094)(!assign multi !true)
(!line 1095)(!assign (!index (!index self "out") (!len (!index self "out"))) "(")
(!line 1096)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) name)))
(!line 1098)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) " ")))
(!not (!callmeth self testnext ",")))
(!line 1101)(!if multi
(!do
(!line 1102)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ")")))
(!line 1104)(!if (!callmeth1 self testnext "=")
(!do
(!line 1105)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) " ")
(!line 1106)(!if multi
(!do
(!line 1107)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) "(")))
(!line 1109)(!callmeth self explist )
(!line 1110)(!if multi
(!do
(!line 1111)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ")")))))
(!line 1114)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ")")))

(!line 1117)(!assign (!index P "funcname") (!lambda (self)
(!line 1119)(!define ismethod !false)
(!line 1120)(!define name (!callmeth self str_checkname ))
(!line 1121)(!while (!eq (!index (!index self "t") "token") ".")

(!line 1122)(!define sav (!index self "out"))
(!line 1123)(!assign (!index self "out") ("(!index " name " "))
(!line 1124)(!callmeth self fieldsel )
(!line 1125)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ")")
(!line 1126)(!assign name (!call tconcat (!index self "out")))
(!line 1127)(!assign (!index self "out") sav))
(!line 1129)(!if (!eq (!index (!index self "t") "token") ":")
(!do
(!line 1130)(!assign ismethod !true)
(!line 1131)(!define sav (!index self "out"))
(!line 1132)(!assign (!index self "out") ("(!index " name " "))
(!line 1133)(!callmeth self fieldsel )
(!line 1134)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ")")
(!line 1135)(!assign name (!call tconcat (!index self "out")))
(!line 1136)(!assign (!index self "out") sav)))
(!line 1138)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) name)
(!line 1139)(!return ismethod)))

(!line 1142)(!assign (!index P "funcstat") (!lambda (self line)
(!line 1144)(!callmeth self next )
(!line 1145)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) "(!line ")
(!line 1146)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) line)
(!line 1147)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ")(!assign ")
(!line 1148)(!define ismethod (!callmeth self funcname ))
(!line 1149)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) " (!lambda ")
(!line 1150)(!callmeth self body ismethod line)
(!line 1151)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ")\x0A")))

(!line 1154)(!assign (!index P "exprstat") (!lambda (self line)
(!line 1156)(!define sav (!index self "out"))
(!line 1157)(!assign (!index self "out") ())
(!line 1158)(!callmeth self suffixedexp )
(!line 1159)(!define out (!call tconcat (!index self "out")))
(!line 1160)(!assign (!index self "out") sav)
(!line 1161)(!if (!or (!eq (!index (!index self "t") "token") "=") (!eq (!index (!index self "t") "token") ","))
(!do
(!line 1162)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) out)
(!line 1163)(!callmeth self assignment 1 line))(!do
(!line 1165)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) "(!line ")
(!line 1166)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) line)
(!line 1167)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ")")
(!line 1168)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) out)))))

(!line 1172)(!assign (!index P "retstat") (!lambda (self line)
(!line 1174)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) "(!line ")
(!line 1175)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) line)
(!line 1176)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ")(!return ")
(!line 1177)(!if (!and (!not (!callmeth self block_follow !true)) (!ne (!index (!index self "t") "token") ";"))
(!do
(!line 1178)(!callmeth self explist )))
(!line 1180)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ")")
(!line 1181)(!callmeth self testnext ";")))

(!line 1184)(!assign (!index P "statement") (!lambda (self)
(!line 1185)(!define line (!index self "linenumber"))
(!line 1186)(!if (!eq (!index (!index self "t") "token") ";")
(!do
(!line 1188)(!callmeth self next ))(!if (!eq (!index (!index self "t") "token") "if")
(!do
(!line 1191)(!callmeth self ifstat line))(!if (!eq (!index (!index self "t") "token") "while")
(!do
(!line 1194)(!callmeth self whilestat line))(!if (!eq (!index (!index self "t") "token") "do")
(!do
(!line 1197)(!callmeth self next )
(!line 1198)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) "(!line ")
(!line 1199)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) line)
(!line 1200)(!assign (!index (!index self "out") (!add (!len (!index self "out")) 1)) ")(!do")
(!line 1201)(!callmeth self block )
(!line 1202)(!callmeth self check_match "end" "do" line))(!if (!eq (!index (!index self "t") "token") "for")
(!do
(!line 1205)(!callmeth self forstat line))(!if (!eq (!index (!index self "t") "token") "repeat")
(!do
(!line 1208)(!callmeth self repeatstat line))(!if (!eq (!index (!index self "t") "token") "function")
(!do
(!line 1211)(!callmeth self funcstat line))(!if (!eq (!index (!index self "t") "token") "local")
(!do
(!line 1214)(!callmeth self next )
(!line 1215)(!if (!callmeth1 self testnext "function")
(!do
(!line 1216)(!callmeth self localfunc line))(!do
(!line 1218)(!callmeth self localstat line))))(!if (!eq (!index (!index self "t") "token") "::")
(!do
(!line 1222)(!callmeth self next )
(!line 1223)(!callmeth self labelstat (!callmeth self str_checkname ) line))(!if (!eq (!index (!index self "t") "token") "return")
(!do
(!line 1226)(!callmeth self next )
(!line 1227)(!callmeth self retstat line))(!if (!eq (!index (!index self "t") "token") "break")
(!do
(!line 1230)(!callmeth self breakstat line))(!if (!eq (!index (!index self "t") "token") "goto")
(!do
(!line 1233)(!callmeth self gotostat line))(!do
(!line 1236)(!callmeth self exprstat line))))))))))))))))

(!line 1240)(!assign (!index P "mainfunc") (!lambda (self)
(!line 1241)(!callmeth self next )
(!line 1242)(!callmeth self statlist )
(!line 1243)(!callmeth self check "<eof>")))

(!line 1246)(!define translate)(!assign translate (!lambda (s fname)
(!line 1247)(!define p (!call setmetatable () ("__index": P)))
(!line 1248)(!callmeth p setinput s fname)
(!line 1249)(!if (!eq (!index p "current") "\x1B")
(!do
(!line 1250)(!return s)))
(!line 1252)(!callmeth p BOM )
(!line 1253)(!callmeth p shebang )
(!line 1254)(!assign (!index p "out") ("(!line " (!call quote fname) " " (!index p "linenumber") ")"))
(!line 1255)(!callmeth p mainfunc )
(!line 1256)(!assign (!index (!index p "out") (!add (!len (!index p "out")) 1)) "\x0A; end of generation")
(!line 1257)(!return (!call tconcat (!index p "out")))))

(!line 1260)(!assign (!index _G "_COMPILER") translate)
(!line 1262)(!define arg arg)
(!line 1263)(!define fname (!and arg (!index arg 1)))
(!line 1264)(!if (!and (!not (!call (!index debug "getinfo") 3)) fname)
(!do
(!line 1265)(!define (f msg) ((!call (!index (!index _G "io") "open") fname "r")))
(!line 1266)(!if (!not f)
(!do
(!line 1267)(!call error msg)))
(!line 1269)(!define s (!callmeth f read "*a"))
(!line 1270)(!callmeth f close )
(!line 1271)(!define code (!call translate s (!concat "@" fname)))
(!line 1272)(!call print "; bootstrap")
(!line 1273)(!call print code)))
; end of generation
